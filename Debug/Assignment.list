
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004904  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004aa4  08004aa4  00005aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b34  08004b34  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b34  08004b34  00005b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b3c  08004b3c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b3c  08004b3c  00005b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b40  08004b40  00005b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004b44  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000006c  08004bb0  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004bb0  000062e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfdb  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ded  00000000  00000000  00013077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00014e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3e  00000000  00000000  00015cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a04  00000000  00000000  00016806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107e6  00000000  00000000  0002e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099787  00000000  00000000  0003e9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8177  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004334  00000000  00000000  000d81bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000dc4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a8c 	.word	0x08004a8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004a8c 	.word	0x08004a8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000db6:	4a38      	ldr	r2, [pc, #224]	@ (8000e98 <HD44780_Init+0xec>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000dbc:	4b37      	ldr	r3, [pc, #220]	@ (8000e9c <HD44780_Init+0xf0>)
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000dc2:	4b37      	ldr	r3, [pc, #220]	@ (8000ea0 <HD44780_Init+0xf4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000dc8:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <HD44780_Init+0xec>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d907      	bls.n	8000de0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000dd0:	4b33      	ldr	r3, [pc, #204]	@ (8000ea0 <HD44780_Init+0xf4>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b31      	ldr	r3, [pc, #196]	@ (8000ea0 <HD44780_Init+0xf4>)
 8000ddc:	701a      	strb	r2, [r3, #0]
 8000dde:	e006      	b.n	8000dee <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000de0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea0 <HD44780_Init+0xf4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <HD44780_Init+0xf4>)
 8000dec:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000dee:	f000 f985 	bl	80010fc <DelayInit>
  HAL_Delay(50);
 8000df2:	2032      	movs	r0, #50	@ 0x32
 8000df4:	f000 ff54 	bl	8001ca0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000df8:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <HD44780_Init+0xf0>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f943 	bl	8001088 <ExpanderWrite>
  HAL_Delay(1000);
 8000e02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e06:	f000 ff4b 	bl	8001ca0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000e0a:	2030      	movs	r0, #48	@ 0x30
 8000e0c:	f000 f92b 	bl	8001066 <Write4Bits>
  DelayUS(4500);
 8000e10:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e14:	f000 f99c 	bl	8001150 <DelayUS>

  Write4Bits(0x03 << 4);
 8000e18:	2030      	movs	r0, #48	@ 0x30
 8000e1a:	f000 f924 	bl	8001066 <Write4Bits>
  DelayUS(4500);
 8000e1e:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e22:	f000 f995 	bl	8001150 <DelayUS>

  Write4Bits(0x03 << 4);
 8000e26:	2030      	movs	r0, #48	@ 0x30
 8000e28:	f000 f91d 	bl	8001066 <Write4Bits>
  DelayUS(4500);
 8000e2c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e30:	f000 f98e 	bl	8001150 <DelayUS>

  Write4Bits(0x02 << 4);
 8000e34:	2020      	movs	r0, #32
 8000e36:	f000 f916 	bl	8001066 <Write4Bits>
  DelayUS(100);
 8000e3a:	2064      	movs	r0, #100	@ 0x64
 8000e3c:	f000 f988 	bl	8001150 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000e40:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <HD44780_Init+0xf4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f8ce 	bl	8000fec <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <HD44780_Init+0xf8>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000e56:	f000 f875 	bl	8000f44 <HD44780_Display>
  HD44780_Clear();
 8000e5a:	f000 f82b 	bl	8000eb4 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HD44780_Init+0xfc>)
 8000e60:	2202      	movs	r2, #2
 8000e62:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000e64:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <HD44780_Init+0xfc>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f8bc 	bl	8000fec <SendCommand>
  DelayUS(4500);
 8000e74:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e78:	f000 f96a 	bl	8001150 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000e7c:	490b      	ldr	r1, [pc, #44]	@ (8000eac <HD44780_Init+0x100>)
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 f876 	bl	8000f70 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000e84:	490a      	ldr	r1, [pc, #40]	@ (8000eb0 <HD44780_Init+0x104>)
 8000e86:	2001      	movs	r0, #1
 8000e88:	f000 f872 	bl	8000f70 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000e8c:	f000 f81d 	bl	8000eca <HD44780_Home>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	2000008b 	.word	0x2000008b
 8000e9c:	2000008c 	.word	0x2000008c
 8000ea0:	20000088 	.word	0x20000088
 8000ea4:	20000089 	.word	0x20000089
 8000ea8:	2000008a 	.word	0x2000008a
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <HD44780_Clear>:

void HD44780_Clear()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 f897 	bl	8000fec <SendCommand>
  DelayUS(2000);
 8000ebe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ec2:	f000 f945 	bl	8001150 <DelayUS>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HD44780_Home>:

void HD44780_Home()
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f000 f88c 	bl	8000fec <SendCommand>
  DelayUS(2000);
 8000ed4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ed8:	f000 f93a 	bl	8001150 <DelayUS>
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460a      	mov	r2, r1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	4613      	mov	r3, r2
 8000eee:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HD44780_SetCursor+0x5c>)
 8000ef2:	f107 0408 	add.w	r4, r7, #8
 8000ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000efc:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <HD44780_SetCursor+0x60>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	79ba      	ldrb	r2, [r7, #6]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d303      	bcc.n	8000f0e <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	@ (8000f40 <HD44780_SetCursor+0x60>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	3318      	adds	r3, #24
 8000f14:	443b      	add	r3, r7
 8000f16:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f85d 	bl	8000fec <SendCommand>
}
 8000f32:	bf00      	nop
 8000f34:	371c      	adds	r7, #28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd90      	pop	{r4, r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	08004aa4 	.word	0x08004aa4
 8000f40:	2000008b 	.word	0x2000008b

08000f44 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HD44780_Display+0x28>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HD44780_Display+0x28>)
 8000f54:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HD44780_Display+0x28>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f843 	bl	8000fec <SendCommand>
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000089 	.word	0x20000089

08000f70 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f82a 	bl	8000fec <SendCommand>
  for (int i=0; i<8; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e009      	b.n	8000fb2 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f82e 	bl	8001008 <SendChar>
  for (int i=0; i<8; i++)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2b07      	cmp	r3, #7
 8000fb6:	ddf2      	ble.n	8000f9e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000fca:	e006      	b.n	8000fda <HD44780_PrintStr+0x18>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f817 	bl	8001008 <SendChar>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f4      	bne.n	8000fcc <HD44780_PrintStr+0xa>
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f812 	bl	8001024 <Send>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2101      	movs	r1, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f804 	bl	8001024 <Send>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f023 030f 	bic.w	r3, r3, #15
 800103a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	4313      	orrs	r3, r2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f80b 	bl	8001066 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001050:	7bba      	ldrb	r2, [r7, #14]
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	4313      	orrs	r3, r2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f804 	bl	8001066 <Write4Bits>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f808 	bl	8001088 <ExpanderWrite>
  PulseEnable(value);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f820 	bl	80010c0 <PulseEnable>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <ExpanderWrite+0x30>)
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4313      	orrs	r3, r2
 800109a:	b2db      	uxtb	r3, r3
 800109c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800109e:	f107 020f 	add.w	r2, r7, #15
 80010a2:	230a      	movs	r3, #10
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	214e      	movs	r1, #78	@ 0x4e
 80010aa:	4804      	ldr	r0, [pc, #16]	@ (80010bc <ExpanderWrite+0x34>)
 80010ac:	f001 fdaa 	bl	8002c04 <HAL_I2C_Master_Transmit>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000008c 	.word	0x2000008c
 80010bc:	200000d8 	.word	0x200000d8

080010c0 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffd8 	bl	8001088 <ExpanderWrite>
  DelayUS(20);
 80010d8:	2014      	movs	r0, #20
 80010da:	f000 f839 	bl	8001150 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f023 0304 	bic.w	r3, r3, #4
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffce 	bl	8001088 <ExpanderWrite>
  DelayUS(20);
 80010ec:	2014      	movs	r0, #20
 80010ee:	f000 f82f 	bl	8001150 <DelayUS>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <DelayInit>:

static void DelayInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <DelayInit+0x4c>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4a10      	ldr	r2, [pc, #64]	@ (8001148 <DelayInit+0x4c>)
 8001106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800110a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <DelayInit+0x4c>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <DelayInit+0x4c>)
 8001112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001116:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <DelayInit+0x50>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <DelayInit+0x50>)
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <DelayInit+0x50>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a08      	ldr	r2, [pc, #32]	@ (800114c <DelayInit+0x50>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <DelayInit+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001136:	bf00      	nop
  __ASM volatile ("NOP");
 8001138:	bf00      	nop
  __ASM volatile ("NOP");
 800113a:	bf00      	nop
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000edf0 	.word	0xe000edf0
 800114c:	e0001000 	.word	0xe0001000

08001150 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <DelayUS+0x44>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0e      	ldr	r2, [pc, #56]	@ (8001198 <DelayUS+0x48>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0c9a      	lsrs	r2, r3, #18
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <DelayUS+0x4c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <DelayUS+0x4c>)
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f6      	bhi.n	8001172 <DelayUS+0x22>
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000010 	.word	0x20000010
 8001198:	431bde83 	.word	0x431bde83
 800119c:	e0001000 	.word	0xe0001000

080011a0 <microDelay>:
uint8_t TFI = 0;
uint8_t TFD = 0;
char strCopy[15];

void microDelay (uint16_t delay)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <microDelay+0x30>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80011b2:	bf00      	nop
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <microDelay+0x30>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3f9      	bcc.n	80011b4 <microDelay+0x14>
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	2000012c 	.word	0x2000012c

080011d4 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 80011ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 80011fe:	463b      	mov	r3, r7
 8001200:	4619      	mov	r1, r3
 8001202:	482d      	ldr	r0, [pc, #180]	@ (80012b8 <DHT11_Start+0xe4>)
 8001204:	f001 fa04 	bl	8002610 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800120e:	482a      	ldr	r0, [pc, #168]	@ (80012b8 <DHT11_Start+0xe4>)
 8001210:	f001 fb9a 	bl	8002948 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001214:	2014      	movs	r0, #20
 8001216:	f000 fd43 	bl	8001ca0 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800121a:	2201      	movs	r2, #1
 800121c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001220:	4825      	ldr	r0, [pc, #148]	@ (80012b8 <DHT11_Start+0xe4>)
 8001222:	f001 fb91 	bl	8002948 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001226:	201e      	movs	r0, #30
 8001228:	f7ff ffba 	bl	80011a0 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001230:	2301      	movs	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	481f      	ldr	r0, [pc, #124]	@ (80012b8 <DHT11_Start+0xe4>)
 800123a:	f001 f9e9 	bl	8002610 <HAL_GPIO_Init>
  microDelay (40);
 800123e:	2028      	movs	r0, #40	@ 0x28
 8001240:	f7ff ffae 	bl	80011a0 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001244:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001248:	481b      	ldr	r0, [pc, #108]	@ (80012b8 <DHT11_Start+0xe4>)
 800124a:	f001 fb65 	bl	8002918 <HAL_GPIO_ReadPin>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10c      	bne.n	800126e <DHT11_Start+0x9a>
  {
    microDelay (80);
 8001254:	2050      	movs	r0, #80	@ 0x50
 8001256:	f7ff ffa3 	bl	80011a0 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800125a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800125e:	4816      	ldr	r0, [pc, #88]	@ (80012b8 <DHT11_Start+0xe4>)
 8001260:	f001 fb5a 	bl	8002918 <HAL_GPIO_ReadPin>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <DHT11_Start+0x9a>
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 800126e:	f000 fd0b 	bl	8001c88 <HAL_GetTick>
 8001272:	4603      	mov	r3, r0
 8001274:	4a11      	ldr	r2, [pc, #68]	@ (80012bc <DHT11_Start+0xe8>)
 8001276:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001278:	f000 fd06 	bl	8001c88 <HAL_GetTick>
 800127c:	4603      	mov	r3, r0
 800127e:	4a10      	ldr	r2, [pc, #64]	@ (80012c0 <DHT11_Start+0xec>)
 8001280:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001282:	e004      	b.n	800128e <DHT11_Start+0xba>
  {
    cMillis = HAL_GetTick();
 8001284:	f000 fd00 	bl	8001c88 <HAL_GetTick>
 8001288:	4603      	mov	r3, r0
 800128a:	4a0d      	ldr	r2, [pc, #52]	@ (80012c0 <DHT11_Start+0xec>)
 800128c:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800128e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001292:	4809      	ldr	r0, [pc, #36]	@ (80012b8 <DHT11_Start+0xe4>)
 8001294:	f001 fb40 	bl	8002918 <HAL_GPIO_ReadPin>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d006      	beq.n	80012ac <DHT11_Start+0xd8>
 800129e:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <DHT11_Start+0xe8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	1c9a      	adds	r2, r3, #2
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <DHT11_Start+0xec>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8eb      	bhi.n	8001284 <DHT11_Start+0xb0>
  }
  return Response;
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40020400 	.word	0x40020400
 80012bc:	2000017c 	.word	0x2000017c
 80012c0:	20000180 	.word	0x20000180

080012c4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	e066      	b.n	800139e <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 80012d0:	f000 fcda 	bl	8001c88 <HAL_GetTick>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4a36      	ldr	r2, [pc, #216]	@ (80013b0 <DHT11_Read+0xec>)
 80012d8:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80012da:	f000 fcd5 	bl	8001c88 <HAL_GetTick>
 80012de:	4603      	mov	r3, r0
 80012e0:	4a34      	ldr	r2, [pc, #208]	@ (80013b4 <DHT11_Read+0xf0>)
 80012e2:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80012e4:	e004      	b.n	80012f0 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 80012e6:	f000 fccf 	bl	8001c88 <HAL_GetTick>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4a31      	ldr	r2, [pc, #196]	@ (80013b4 <DHT11_Read+0xf0>)
 80012ee:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80012f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012f4:	4830      	ldr	r0, [pc, #192]	@ (80013b8 <DHT11_Read+0xf4>)
 80012f6:	f001 fb0f 	bl	8002918 <HAL_GPIO_ReadPin>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d106      	bne.n	800130e <DHT11_Read+0x4a>
 8001300:	4b2b      	ldr	r3, [pc, #172]	@ (80013b0 <DHT11_Read+0xec>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	1c9a      	adds	r2, r3, #2
 8001306:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <DHT11_Read+0xf0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d8eb      	bhi.n	80012e6 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 800130e:	2028      	movs	r0, #40	@ 0x28
 8001310:	f7ff ff46 	bl	80011a0 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001314:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001318:	4827      	ldr	r0, [pc, #156]	@ (80013b8 <DHT11_Read+0xf4>)
 800131a:	f001 fafd 	bl	8002918 <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10e      	bne.n	8001342 <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2201      	movs	r2, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	b25a      	sxtb	r2, r3
 8001336:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800133a:	4013      	ands	r3, r2
 800133c:	b25b      	sxtb	r3, r3
 800133e:	71bb      	strb	r3, [r7, #6]
 8001340:	e00b      	b.n	800135a <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f1c3 0307 	rsb	r3, r3, #7
 8001348:	2201      	movs	r2, #1
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	b25a      	sxtb	r2, r3
 8001350:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001354:	4313      	orrs	r3, r2
 8001356:	b25b      	sxtb	r3, r3
 8001358:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 800135a:	f000 fc95 	bl	8001c88 <HAL_GetTick>
 800135e:	4603      	mov	r3, r0
 8001360:	4a13      	ldr	r2, [pc, #76]	@ (80013b0 <DHT11_Read+0xec>)
 8001362:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001364:	f000 fc90 	bl	8001c88 <HAL_GetTick>
 8001368:	4603      	mov	r3, r0
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <DHT11_Read+0xf0>)
 800136c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800136e:	e004      	b.n	800137a <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001370:	f000 fc8a 	bl	8001c88 <HAL_GetTick>
 8001374:	4603      	mov	r3, r0
 8001376:	4a0f      	ldr	r2, [pc, #60]	@ (80013b4 <DHT11_Read+0xf0>)
 8001378:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800137a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800137e:	480e      	ldr	r0, [pc, #56]	@ (80013b8 <DHT11_Read+0xf4>)
 8001380:	f001 faca 	bl	8002918 <HAL_GPIO_ReadPin>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <DHT11_Read+0xd4>
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <DHT11_Read+0xec>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	1c9a      	adds	r2, r3, #2
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <DHT11_Read+0xf0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8eb      	bhi.n	8001370 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	3301      	adds	r3, #1
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b07      	cmp	r3, #7
 80013a2:	d995      	bls.n	80012d0 <DHT11_Read+0xc>
    }
  }
  return b;
 80013a4:	79bb      	ldrb	r3, [r7, #6]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000017c 	.word	0x2000017c
 80013b4:	20000180 	.word	0x20000180
 80013b8:	40020400 	.word	0x40020400

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	ed2d 8b02 	vpush	{d8}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c6:	f000 fbf9 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ca:	f000 f8d7 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ce:	f000 fa0f 	bl	80017f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013d2:	f000 f98f 	bl	80016f4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80013d6:	f000 f9bb 	bl	8001750 <MX_TIM1_Init>
  MX_ADC1_Init();
 80013da:	f000 f939 	bl	8001650 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //start up for ICD I2C
  HAL_TIM_Base_Start(&htim1);
 80013de:	4857      	ldr	r0, [pc, #348]	@ (800153c <main+0x180>)
 80013e0:	f002 fbfe 	bl	8003be0 <HAL_TIM_Base_Start>
  HD44780_Init(2);
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff fce1 	bl	8000dac <HD44780_Init>
  HD44780_Clear();
 80013ea:	f7ff fd63 	bl	8000eb4 <HD44780_Clear>
  HD44780_Display();
 80013ee:	f7ff fda9 	bl	8000f44 <HD44780_Display>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //Read value from Photoresistor (LDR)
	  HAL_ADC_Start(&hadc1);
 80013f2:	4853      	ldr	r0, [pc, #332]	@ (8001540 <main+0x184>)
 80013f4:	f000 fcbc 	bl	8001d70 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,200);
 80013f8:	21c8      	movs	r1, #200	@ 0xc8
 80013fa:	4851      	ldr	r0, [pc, #324]	@ (8001540 <main+0x184>)
 80013fc:	f000 fd6c 	bl	8001ed8 <HAL_ADC_PollForConversion>
	  luxvalue = HAL_ADC_GetValue(&hadc1);
 8001400:	484f      	ldr	r0, [pc, #316]	@ (8001540 <main+0x184>)
 8001402:	f000 fdf4 	bl	8001fee <HAL_ADC_GetValue>
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]

	  //Read values from DHT11
	  if(DHT11_Start())
 800140a:	f7ff fee3 	bl	80011d4 <DHT11_Start>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d05a      	beq.n	80014ca <main+0x10e>
	  	  {
	  		  RHI = DHT11_Read(); // Relative humidity integral
 8001414:	f7ff ff56 	bl	80012c4 <DHT11_Read>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b49      	ldr	r3, [pc, #292]	@ (8001544 <main+0x188>)
 800141e:	701a      	strb	r2, [r3, #0]
	  	 	  RHD = DHT11_Read(); // Relative humidity decimal
 8001420:	f7ff ff50 	bl	80012c4 <DHT11_Read>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	4b47      	ldr	r3, [pc, #284]	@ (8001548 <main+0x18c>)
 800142a:	701a      	strb	r2, [r3, #0]
	  	 	  TCI = DHT11_Read(); // Celsius integral
 800142c:	f7ff ff4a 	bl	80012c4 <DHT11_Read>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	4b45      	ldr	r3, [pc, #276]	@ (800154c <main+0x190>)
 8001436:	701a      	strb	r2, [r3, #0]
	  	 	  TCD = DHT11_Read(); // Celsius decimal
 8001438:	f7ff ff44 	bl	80012c4 <DHT11_Read>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	4b43      	ldr	r3, [pc, #268]	@ (8001550 <main+0x194>)
 8001442:	701a      	strb	r2, [r3, #0]
	  	 	  SUM = DHT11_Read(); // Check sum
 8001444:	f7ff ff3e 	bl	80012c4 <DHT11_Read>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	4b41      	ldr	r3, [pc, #260]	@ (8001554 <main+0x198>)
 800144e:	701a      	strb	r2, [r3, #0]
	  	 	  if (RHI + RHD + TCI + TCD == SUM)
 8001450:	4b3c      	ldr	r3, [pc, #240]	@ (8001544 <main+0x188>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b3c      	ldr	r3, [pc, #240]	@ (8001548 <main+0x18c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a3b      	ldr	r2, [pc, #236]	@ (800154c <main+0x190>)
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	4413      	add	r3, r2
 8001462:	4a3b      	ldr	r2, [pc, #236]	@ (8001550 <main+0x194>)
 8001464:	7812      	ldrb	r2, [r2, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a3a      	ldr	r2, [pc, #232]	@ (8001554 <main+0x198>)
 800146a:	7812      	ldrb	r2, [r2, #0]
 800146c:	4293      	cmp	r3, r2
 800146e:	d12c      	bne.n	80014ca <main+0x10e>
	  	 	  {
	  	 	        tCelsius = (float)TCI + (float)(TCD/10.0); //transform the data
 8001470:	4b36      	ldr	r3, [pc, #216]	@ (800154c <main+0x190>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800147c:	4b34      	ldr	r3, [pc, #208]	@ (8001550 <main+0x194>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f84f 	bl	8000524 <__aeabi_i2d>
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b33      	ldr	r3, [pc, #204]	@ (8001558 <main+0x19c>)
 800148c:	f7ff f9de 	bl	800084c <__aeabi_ddiv>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f7ff fac0 	bl	8000a1c <__aeabi_d2f>
 800149c:	ee07 0a90 	vmov	s15, r0
 80014a0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80014a4:	4b2d      	ldr	r3, [pc, #180]	@ (800155c <main+0x1a0>)
 80014a6:	edc3 7a00 	vstr	s15, [r3]
	  	 	        sprintf(strCopy,"TEMP: %d.%d C", TCI, TCD); //print the temperature value
 80014aa:	4b28      	ldr	r3, [pc, #160]	@ (800154c <main+0x190>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <main+0x194>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	492a      	ldr	r1, [pc, #168]	@ (8001560 <main+0x1a4>)
 80014b6:	482b      	ldr	r0, [pc, #172]	@ (8001564 <main+0x1a8>)
 80014b8:	f002 fe48 	bl	800414c <siprintf>
	  	 	        HD44780_SetCursor(0,0); //print the temperature at first row
 80014bc:	2100      	movs	r1, #0
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff fd0e 	bl	8000ee0 <HD44780_SetCursor>
	  	 	        HD44780_PrintStr(strCopy);
 80014c4:	4827      	ldr	r0, [pc, #156]	@ (8001564 <main+0x1a8>)
 80014c6:	f7ff fd7c 	bl	8000fc2 <HD44780_PrintStr>
	  	 	  }
	  	  }
	  	  //if temperature and intensity exceed the threshold value
	  	  if (tCelsius > 35.0 || luxvalue > 300 )
 80014ca:	4b24      	ldr	r3, [pc, #144]	@ (800155c <main+0x1a0>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001568 <main+0x1ac>
 80014d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	dc03      	bgt.n	80014e6 <main+0x12a>
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014e4:	d913      	bls.n	800150e <main+0x152>
	  	  {
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET); //turn on buzzer
 80014e6:	2201      	movs	r2, #1
 80014e8:	2180      	movs	r1, #128	@ 0x80
 80014ea:	4820      	ldr	r0, [pc, #128]	@ (800156c <main+0x1b0>)
 80014ec:	f001 fa2c 	bl	8002948 <HAL_GPIO_WritePin>
	  	  	  HD44780_SetCursor(0,1); //print the message at second row
 80014f0:	2101      	movs	r1, #1
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff fcf4 	bl	8000ee0 <HD44780_SetCursor>
	  	  	  HD44780_PrintStr("          ");//clear the second row
 80014f8:	481d      	ldr	r0, [pc, #116]	@ (8001570 <main+0x1b4>)
 80014fa:	f7ff fd62 	bl	8000fc2 <HD44780_PrintStr>
	  	  	  HD44780_SetCursor(0,1);//print the message at second row
 80014fe:	2101      	movs	r1, #1
 8001500:	2000      	movs	r0, #0
 8001502:	f7ff fced 	bl	8000ee0 <HD44780_SetCursor>
	  	  	  HD44780_PrintStr("ABNORMAL!!");//print message "abnormal" on the LCD
 8001506:	481b      	ldr	r0, [pc, #108]	@ (8001574 <main+0x1b8>)
 8001508:	f7ff fd5b 	bl	8000fc2 <HD44780_PrintStr>
 800150c:	e012      	b.n	8001534 <main+0x178>
	  	  }
	  	  else
	  	  {
	  	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); //turn of buzzer
 800150e:	2200      	movs	r2, #0
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	4816      	ldr	r0, [pc, #88]	@ (800156c <main+0x1b0>)
 8001514:	f001 fa18 	bl	8002948 <HAL_GPIO_WritePin>
	  	  	  HD44780_SetCursor(0,1);//print the message at second row
 8001518:	2101      	movs	r1, #1
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fce0 	bl	8000ee0 <HD44780_SetCursor>
	  	  	  HD44780_PrintStr("          ");//clear the second row
 8001520:	4813      	ldr	r0, [pc, #76]	@ (8001570 <main+0x1b4>)
 8001522:	f7ff fd4e 	bl	8000fc2 <HD44780_PrintStr>
	  	  	  HD44780_SetCursor(0,1);//print the message at second row
 8001526:	2101      	movs	r1, #1
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fcd9 	bl	8000ee0 <HD44780_SetCursor>
	  	  	  HD44780_PrintStr("Normal...");//print message "normal" on the LCD
 800152e:	4812      	ldr	r0, [pc, #72]	@ (8001578 <main+0x1bc>)
 8001530:	f7ff fd47 	bl	8000fc2 <HD44780_PrintStr>
	  	  }
	  	  HAL_Delay(20);
 8001534:	2014      	movs	r0, #20
 8001536:	f000 fbb3 	bl	8001ca0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800153a:	e75a      	b.n	80013f2 <main+0x36>
 800153c:	2000012c 	.word	0x2000012c
 8001540:	20000090 	.word	0x20000090
 8001544:	20000174 	.word	0x20000174
 8001548:	20000175 	.word	0x20000175
 800154c:	20000176 	.word	0x20000176
 8001550:	20000177 	.word	0x20000177
 8001554:	20000178 	.word	0x20000178
 8001558:	40240000 	.word	0x40240000
 800155c:	20000184 	.word	0x20000184
 8001560:	08004ab4 	.word	0x08004ab4
 8001564:	20000188 	.word	0x20000188
 8001568:	420c0000 	.word	0x420c0000
 800156c:	40020000 	.word	0x40020000
 8001570:	08004ac4 	.word	0x08004ac4
 8001574:	08004ad0 	.word	0x08004ad0
 8001578:	08004adc 	.word	0x08004adc

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b094      	sub	sp, #80	@ 0x50
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	2230      	movs	r2, #48	@ 0x30
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fdfe 	bl	800418c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <SystemClock_Config+0xcc>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	4a27      	ldr	r2, [pc, #156]	@ (8001648 <SystemClock_Config+0xcc>)
 80015aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b0:	4b25      	ldr	r3, [pc, #148]	@ (8001648 <SystemClock_Config+0xcc>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	4b22      	ldr	r3, [pc, #136]	@ (800164c <SystemClock_Config+0xd0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015c8:	4a20      	ldr	r2, [pc, #128]	@ (800164c <SystemClock_Config+0xd0>)
 80015ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <SystemClock_Config+0xd0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015dc:	2301      	movs	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e6:	2302      	movs	r3, #2
 80015e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015f0:	2319      	movs	r3, #25
 80015f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80015f4:	2390      	movs	r3, #144	@ 0x90
 80015f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f8:	2302      	movs	r3, #2
 80015fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015fc:	2304      	movs	r3, #4
 80015fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fe57 	bl	80032b8 <HAL_RCC_OscConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001610:	f000 f956 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001614:	230f      	movs	r3, #15
 8001616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001618:	2302      	movs	r3, #2
 800161a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	2102      	movs	r1, #2
 8001630:	4618      	mov	r0, r3
 8001632:	f002 f8b9 	bl	80037a8 <HAL_RCC_ClockConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800163c:	f000 f940 	bl	80018c0 <Error_Handler>
  }
}
 8001640:	bf00      	nop
 8001642:	3750      	adds	r7, #80	@ 0x50
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800
 800164c:	40007000 	.word	0x40007000

08001650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001656:	463b      	mov	r3, r7
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001662:	4b21      	ldr	r3, [pc, #132]	@ (80016e8 <MX_ADC1_Init+0x98>)
 8001664:	4a21      	ldr	r2, [pc, #132]	@ (80016ec <MX_ADC1_Init+0x9c>)
 8001666:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <MX_ADC1_Init+0x98>)
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800166e:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <MX_ADC1_Init+0x98>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001674:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <MX_ADC1_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800167a:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <MX_ADC1_Init+0x98>)
 800167c:	2200      	movs	r2, #0
 800167e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <MX_ADC1_Init+0x98>)
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001688:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <MX_ADC1_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800168e:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <MX_ADC1_Init+0x98>)
 8001690:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <MX_ADC1_Init+0xa0>)
 8001692:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <MX_ADC1_Init+0x98>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <MX_ADC1_Init+0x98>)
 800169c:	2201      	movs	r2, #1
 800169e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <MX_ADC1_Init+0x98>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <MX_ADC1_Init+0x98>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016ae:	480e      	ldr	r0, [pc, #56]	@ (80016e8 <MX_ADC1_Init+0x98>)
 80016b0:	f000 fb1a 	bl	8001ce8 <HAL_ADC_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016ba:	f000 f901 	bl	80018c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016be:	2308      	movs	r3, #8
 80016c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80016c6:	2301      	movs	r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ca:	463b      	mov	r3, r7
 80016cc:	4619      	mov	r1, r3
 80016ce:	4806      	ldr	r0, [pc, #24]	@ (80016e8 <MX_ADC1_Init+0x98>)
 80016d0:	f000 fc9a 	bl	8002008 <HAL_ADC_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80016da:	f000 f8f1 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000090 	.word	0x20000090
 80016ec:	40012000 	.word	0x40012000
 80016f0:	0f000001 	.word	0x0f000001

080016f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <MX_I2C1_Init+0x50>)
 80016fa:	4a13      	ldr	r2, [pc, #76]	@ (8001748 <MX_I2C1_Init+0x54>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001700:	4a12      	ldr	r2, [pc, #72]	@ (800174c <MX_I2C1_Init+0x58>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001712:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001732:	f001 f923 	bl	800297c <HAL_I2C_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800173c:	f000 f8c0 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200000d8 	.word	0x200000d8
 8001748:	40005400 	.word	0x40005400
 800174c:	000186a0 	.word	0x000186a0

08001750 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	463b      	mov	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800176c:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <MX_TIM1_Init+0x98>)
 800176e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ec <MX_TIM1_Init+0x9c>)
 8001770:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001772:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <MX_TIM1_Init+0x98>)
 8001774:	2247      	movs	r2, #71	@ 0x47
 8001776:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <MX_TIM1_Init+0x98>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800177e:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <MX_TIM1_Init+0x98>)
 8001780:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001784:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <MX_TIM1_Init+0x98>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800178c:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <MX_TIM1_Init+0x98>)
 800178e:	2200      	movs	r2, #0
 8001790:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <MX_TIM1_Init+0x98>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001798:	4813      	ldr	r0, [pc, #76]	@ (80017e8 <MX_TIM1_Init+0x98>)
 800179a:	f002 f9d1 	bl	8003b40 <HAL_TIM_Base_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80017a4:	f000 f88c 	bl	80018c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <MX_TIM1_Init+0x98>)
 80017b6:	f002 fa6d 	bl	8003c94 <HAL_TIM_ConfigClockSource>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80017c0:	f000 f87e 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_TIM1_Init+0x98>)
 80017d2:	f002 fc4d 	bl	8004070 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017dc:	f000 f870 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000012c 	.word	0x2000012c
 80017ec:	40010000 	.word	0x40010000

080017f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b2a      	ldr	r3, [pc, #168]	@ (80018b4 <MX_GPIO_Init+0xc4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a29      	ldr	r2, [pc, #164]	@ (80018b4 <MX_GPIO_Init+0xc4>)
 8001810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <MX_GPIO_Init+0xc4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <MX_GPIO_Init+0xc4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a22      	ldr	r2, [pc, #136]	@ (80018b4 <MX_GPIO_Init+0xc4>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <MX_GPIO_Init+0xc4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <MX_GPIO_Init+0xc4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <MX_GPIO_Init+0xc4>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <MX_GPIO_Init+0xc4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2180      	movs	r1, #128	@ 0x80
 800185e:	4816      	ldr	r0, [pc, #88]	@ (80018b8 <MX_GPIO_Init+0xc8>)
 8001860:	f001 f872 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800186a:	4814      	ldr	r0, [pc, #80]	@ (80018bc <MX_GPIO_Init+0xcc>)
 800186c:	f001 f86c 	bl	8002948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4619      	mov	r1, r3
 8001886:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <MX_GPIO_Init+0xc8>)
 8001888:	f000 fec2 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800188c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	@ (80018bc <MX_GPIO_Init+0xcc>)
 80018a6:	f000 feb3 	bl	8002610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020400 	.word	0x40020400

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <Error_Handler+0x8>

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	4a0f      	ldr	r2, [pc, #60]	@ (8001918 <HAL_MspInit+0x4c>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a17      	ldr	r2, [pc, #92]	@ (8001998 <HAL_ADC_MspInit+0x7c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d127      	bne.n	800198e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <HAL_ADC_MspInit+0x80>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a15      	ldr	r2, [pc, #84]	@ (800199c <HAL_ADC_MspInit+0x80>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b13      	ldr	r3, [pc, #76]	@ (800199c <HAL_ADC_MspInit+0x80>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_ADC_MspInit+0x80>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a0e      	ldr	r2, [pc, #56]	@ (800199c <HAL_ADC_MspInit+0x80>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <HAL_ADC_MspInit+0x80>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001976:	2301      	movs	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197a:	2303      	movs	r3, #3
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <HAL_ADC_MspInit+0x84>)
 800198a:	f000 fe41 	bl	8002610 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	@ 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40012000 	.word	0x40012000
 800199c:	40023800 	.word	0x40023800
 80019a0:	40020400 	.word	0x40020400

080019a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	@ 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	@ (8001a28 <HAL_I2C_MspInit+0x84>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d12b      	bne.n	8001a1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <HAL_I2C_MspInit+0x88>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <HAL_I2C_MspInit+0x88>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_I2C_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019e2:	23c0      	movs	r3, #192	@ 0xc0
 80019e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e6:	2312      	movs	r3, #18
 80019e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ee:	2303      	movs	r3, #3
 80019f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019f2:	2304      	movs	r3, #4
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	480c      	ldr	r0, [pc, #48]	@ (8001a30 <HAL_I2C_MspInit+0x8c>)
 80019fe:	f000 fe07 	bl	8002610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_I2C_MspInit+0x88>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <HAL_I2C_MspInit+0x88>)
 8001a0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_I2C_MspInit+0x88>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	@ 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020400 	.word	0x40020400

08001a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <HAL_TIM_Base_MspInit+0x3c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10d      	bne.n	8001a62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <HAL_TIM_Base_MspInit+0x40>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4e:	4a09      	ldr	r2, [pc, #36]	@ (8001a74 <HAL_TIM_Base_MspInit+0x40>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <HAL_TIM_Base_MspInit+0x40>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40010000 	.word	0x40010000
 8001a74:	40023800 	.word	0x40023800

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <NMI_Handler+0x4>

08001a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <MemManage_Handler+0x4>

08001a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <BusFault_Handler+0x4>

08001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <UsageFault_Handler+0x4>

08001aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ace:	f000 f8c7 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	@ (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f002 fb48 	bl	800419c <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20010000 	.word	0x20010000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	20000198 	.word	0x20000198
 8001b40:	200002e8 	.word	0x200002e8

08001b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b6c:	f7ff ffea 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b70:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b72:	490d      	ldr	r1, [pc, #52]	@ (8001ba8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b88:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b96:	f002 fb07 	bl	80041a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9a:	f7ff fc0f 	bl	80013bc <main>
  bx  lr    
 8001b9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001bac:	08004b44 	.word	0x08004b44
  ldr r2, =_sbss
 8001bb0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001bb4:	200002e8 	.word	0x200002e8

08001bb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <HAL_Init+0x40>)
 8001bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <HAL_Init+0x40>)
 8001bd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_Init+0x40>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <HAL_Init+0x40>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 fcdf 	bl	80025a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bea:	200f      	movs	r0, #15
 8001bec:	f000 f808 	bl	8001c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf0:	f7ff fe6c 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023c00 	.word	0x40023c00

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_InitTick+0x54>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_InitTick+0x58>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 fce9 	bl	80025f6 <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00e      	b.n	8001c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d80a      	bhi.n	8001c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f000 fcbf 	bl	80025be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c40:	4a06      	ldr	r2, [pc, #24]	@ (8001c5c <HAL_InitTick+0x5c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000010 	.word	0x20000010
 8001c58:	20000018 	.word	0x20000018
 8001c5c:	20000014 	.word	0x20000014

08001c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_IncTick+0x20>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <HAL_IncTick+0x24>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000018 	.word	0x20000018
 8001c84:	2000019c 	.word	0x2000019c

08001c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <HAL_GetTick+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	2000019c 	.word	0x2000019c

08001ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff ffee 	bl	8001c88 <HAL_GetTick>
 8001cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb8:	d005      	beq.n	8001cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_Delay+0x44>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc6:	bf00      	nop
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f7      	bhi.n	8001cc8 <HAL_Delay+0x28>
  {
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000018 	.word	0x20000018

08001ce8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e033      	b.n	8001d66 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fe08 	bl	800191c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d118      	bne.n	8001d58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d2e:	f023 0302 	bic.w	r3, r3, #2
 8001d32:	f043 0202 	orr.w	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 fa86 	bl	800224c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	f043 0201 	orr.w	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d56:	e001      	b.n	8001d5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Start+0x1a>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e097      	b.n	8001eba <HAL_ADC_Start+0x14a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d018      	beq.n	8001dd2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001db0:	4b45      	ldr	r3, [pc, #276]	@ (8001ec8 <HAL_ADC_Start+0x158>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a45      	ldr	r2, [pc, #276]	@ (8001ecc <HAL_ADC_Start+0x15c>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0c9a      	lsrs	r2, r3, #18
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001dc4:	e002      	b.n	8001dcc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f9      	bne.n	8001dc6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d15f      	bne.n	8001ea0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e0a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e1e:	d106      	bne.n	8001e2e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e24:	f023 0206 	bic.w	r2, r3, #6
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e2c:	e002      	b.n	8001e34 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e3c:	4b24      	ldr	r3, [pc, #144]	@ (8001ed0 <HAL_ADC_Start+0x160>)
 8001e3e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e48:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10f      	bne.n	8001e76 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d129      	bne.n	8001eb8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	e020      	b.n	8001eb8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a16      	ldr	r2, [pc, #88]	@ (8001ed4 <HAL_ADC_Start+0x164>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_ADC_Start+0x148>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d114      	bne.n	8001eb8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	e00b      	b.n	8001eb8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	f043 0210 	orr.w	r2, r3, #16
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000010 	.word	0x20000010
 8001ecc:	431bde83 	.word	0x431bde83
 8001ed0:	40012300 	.word	0x40012300
 8001ed4:	40012000 	.word	0x40012000

08001ed8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef4:	d113      	bne.n	8001f1e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f04:	d10b      	bne.n	8001f1e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e063      	b.n	8001fe6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f1e:	f7ff feb3 	bl	8001c88 <HAL_GetTick>
 8001f22:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f24:	e021      	b.n	8001f6a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d01d      	beq.n	8001f6a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_ADC_PollForConversion+0x6c>
 8001f34:	f7ff fea8 	bl	8001c88 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d212      	bcs.n	8001f6a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d00b      	beq.n	8001f6a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f043 0204 	orr.w	r2, r3, #4
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e03d      	b.n	8001fe6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d1d6      	bne.n	8001f26 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0212 	mvn.w	r2, #18
 8001f80:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d123      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d11f      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001faa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d111      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x1c>
 8002020:	2302      	movs	r3, #2
 8002022:	e105      	b.n	8002230 <HAL_ADC_ConfigChannel+0x228>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b09      	cmp	r3, #9
 8002032:	d925      	bls.n	8002080 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68d9      	ldr	r1, [r3, #12]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	3b1e      	subs	r3, #30
 800204a:	2207      	movs	r2, #7
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43da      	mvns	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	400a      	ands	r2, r1
 8002058:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68d9      	ldr	r1, [r3, #12]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	4603      	mov	r3, r0
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4403      	add	r3, r0
 8002072:	3b1e      	subs	r3, #30
 8002074:	409a      	lsls	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	e022      	b.n	80020c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6919      	ldr	r1, [r3, #16]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	2207      	movs	r2, #7
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	400a      	ands	r2, r1
 80020a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6919      	ldr	r1, [r3, #16]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	4603      	mov	r3, r0
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4403      	add	r3, r0
 80020bc:	409a      	lsls	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d824      	bhi.n	8002118 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	3b05      	subs	r3, #5
 80020e0:	221f      	movs	r2, #31
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	400a      	ands	r2, r1
 80020ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	4618      	mov	r0, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	3b05      	subs	r3, #5
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	635a      	str	r2, [r3, #52]	@ 0x34
 8002116:	e04c      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b0c      	cmp	r3, #12
 800211e:	d824      	bhi.n	800216a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3b23      	subs	r3, #35	@ 0x23
 8002132:	221f      	movs	r2, #31
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43da      	mvns	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	400a      	ands	r2, r1
 8002140:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	3b23      	subs	r3, #35	@ 0x23
 800215c:	fa00 f203 	lsl.w	r2, r0, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	631a      	str	r2, [r3, #48]	@ 0x30
 8002168:	e023      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	3b41      	subs	r3, #65	@ 0x41
 800217c:	221f      	movs	r2, #31
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	400a      	ands	r2, r1
 800218a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	4618      	mov	r0, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	3b41      	subs	r3, #65	@ 0x41
 80021a6:	fa00 f203 	lsl.w	r2, r0, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021b2:	4b22      	ldr	r3, [pc, #136]	@ (800223c <HAL_ADC_ConfigChannel+0x234>)
 80021b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a21      	ldr	r2, [pc, #132]	@ (8002240 <HAL_ADC_ConfigChannel+0x238>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d109      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1cc>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b12      	cmp	r3, #18
 80021c6:	d105      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a19      	ldr	r2, [pc, #100]	@ (8002240 <HAL_ADC_ConfigChannel+0x238>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d123      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x21e>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d003      	beq.n	80021ee <HAL_ADC_ConfigChannel+0x1e6>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b11      	cmp	r3, #17
 80021ec:	d11b      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d111      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002202:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <HAL_ADC_ConfigChannel+0x23c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a10      	ldr	r2, [pc, #64]	@ (8002248 <HAL_ADC_ConfigChannel+0x240>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	0c9a      	lsrs	r2, r3, #18
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002218:	e002      	b.n	8002220 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3b01      	subs	r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f9      	bne.n	800221a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40012300 	.word	0x40012300
 8002240:	40012000 	.word	0x40012000
 8002244:	20000010 	.word	0x20000010
 8002248:	431bde83 	.word	0x431bde83

0800224c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002254:	4b79      	ldr	r3, [pc, #484]	@ (800243c <ADC_Init+0x1f0>)
 8002256:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	431a      	orrs	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6859      	ldr	r1, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	021a      	lsls	r2, r3, #8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	4a58      	ldr	r2, [pc, #352]	@ (8002440 <ADC_Init+0x1f4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d022      	beq.n	800232a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6899      	ldr	r1, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6899      	ldr	r1, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	e00f      	b.n	800234a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002348:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0202 	bic.w	r2, r2, #2
 8002358:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6899      	ldr	r1, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7e1b      	ldrb	r3, [r3, #24]
 8002364:	005a      	lsls	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01b      	beq.n	80023b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002386:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002396:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6859      	ldr	r1, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	3b01      	subs	r3, #1
 80023a4:	035a      	lsls	r2, r3, #13
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	e007      	b.n	80023c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023be:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	3b01      	subs	r3, #1
 80023dc:	051a      	lsls	r2, r3, #20
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6899      	ldr	r1, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002402:	025a      	lsls	r2, r3, #9
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800241a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	029a      	lsls	r2, r3, #10
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	40012300 	.word	0x40012300
 8002440:	0f000001 	.word	0x0f000001

08002444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002460:	4013      	ands	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800246c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002476:	4a04      	ldr	r2, [pc, #16]	@ (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	60d3      	str	r3, [r2, #12]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002490:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	f003 0307 	and.w	r3, r3, #7
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	db0a      	blt.n	80024d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	490c      	ldr	r1, [pc, #48]	@ (80024f4 <__NVIC_SetPriority+0x4c>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	0112      	lsls	r2, r2, #4
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	440b      	add	r3, r1
 80024cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d0:	e00a      	b.n	80024e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4908      	ldr	r1, [pc, #32]	@ (80024f8 <__NVIC_SetPriority+0x50>)
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	3b04      	subs	r3, #4
 80024e0:	0112      	lsls	r2, r2, #4
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	440b      	add	r3, r1
 80024e6:	761a      	strb	r2, [r3, #24]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000e100 	.word	0xe000e100
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	@ 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f1c3 0307 	rsb	r3, r3, #7
 8002516:	2b04      	cmp	r3, #4
 8002518:	bf28      	it	cs
 800251a:	2304      	movcs	r3, #4
 800251c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3304      	adds	r3, #4
 8002522:	2b06      	cmp	r3, #6
 8002524:	d902      	bls.n	800252c <NVIC_EncodePriority+0x30>
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3b03      	subs	r3, #3
 800252a:	e000      	b.n	800252e <NVIC_EncodePriority+0x32>
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	401a      	ands	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	43d9      	mvns	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	4313      	orrs	r3, r2
         );
}
 8002556:	4618      	mov	r0, r3
 8002558:	3724      	adds	r7, #36	@ 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3b01      	subs	r3, #1
 8002570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002574:	d301      	bcc.n	800257a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002576:	2301      	movs	r3, #1
 8002578:	e00f      	b.n	800259a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257a:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <SysTick_Config+0x40>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b01      	subs	r3, #1
 8002580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002582:	210f      	movs	r1, #15
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	f7ff ff8e 	bl	80024a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800258c:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <SysTick_Config+0x40>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002592:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <SysTick_Config+0x40>)
 8002594:	2207      	movs	r2, #7
 8002596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	e000e010 	.word	0xe000e010

080025a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff47 	bl	8002444 <__NVIC_SetPriorityGrouping>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025be:	b580      	push	{r7, lr}
 80025c0:	b086      	sub	sp, #24
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d0:	f7ff ff5c 	bl	800248c <__NVIC_GetPriorityGrouping>
 80025d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	6978      	ldr	r0, [r7, #20]
 80025dc:	f7ff ff8e 	bl	80024fc <NVIC_EncodePriority>
 80025e0:	4602      	mov	r2, r0
 80025e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff5d 	bl	80024a8 <__NVIC_SetPriority>
}
 80025ee:	bf00      	nop
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ffb0 	bl	8002564 <SysTick_Config>
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	@ 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e159      	b.n	80028e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 8148 	bne.w	80028da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d005      	beq.n	8002662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265e:	2b02      	cmp	r3, #2
 8002660:	d130      	bne.n	80026c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002698:	2201      	movs	r2, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 0201 	and.w	r2, r3, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d017      	beq.n	8002700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d123      	bne.n	8002754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	08da      	lsrs	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3208      	adds	r2, #8
 800274e:	69b9      	ldr	r1, [r7, #24]
 8002750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a2 	beq.w	80028da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b57      	ldr	r3, [pc, #348]	@ (80028f8 <HAL_GPIO_Init+0x2e8>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	4a56      	ldr	r2, [pc, #344]	@ (80028f8 <HAL_GPIO_Init+0x2e8>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027a6:	4b54      	ldr	r3, [pc, #336]	@ (80028f8 <HAL_GPIO_Init+0x2e8>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b2:	4a52      	ldr	r2, [pc, #328]	@ (80028fc <HAL_GPIO_Init+0x2ec>)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3302      	adds	r3, #2
 80027ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a49      	ldr	r2, [pc, #292]	@ (8002900 <HAL_GPIO_Init+0x2f0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x202>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a48      	ldr	r2, [pc, #288]	@ (8002904 <HAL_GPIO_Init+0x2f4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x1fe>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a47      	ldr	r2, [pc, #284]	@ (8002908 <HAL_GPIO_Init+0x2f8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x1fa>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a46      	ldr	r2, [pc, #280]	@ (800290c <HAL_GPIO_Init+0x2fc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x1f6>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a45      	ldr	r2, [pc, #276]	@ (8002910 <HAL_GPIO_Init+0x300>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x1f2>
 80027fe:	2304      	movs	r3, #4
 8002800:	e008      	b.n	8002814 <HAL_GPIO_Init+0x204>
 8002802:	2307      	movs	r3, #7
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x204>
 8002806:	2303      	movs	r3, #3
 8002808:	e004      	b.n	8002814 <HAL_GPIO_Init+0x204>
 800280a:	2302      	movs	r3, #2
 800280c:	e002      	b.n	8002814 <HAL_GPIO_Init+0x204>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_GPIO_Init+0x204>
 8002812:	2300      	movs	r3, #0
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	f002 0203 	and.w	r2, r2, #3
 800281a:	0092      	lsls	r2, r2, #2
 800281c:	4093      	lsls	r3, r2
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002824:	4935      	ldr	r1, [pc, #212]	@ (80028fc <HAL_GPIO_Init+0x2ec>)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002832:	4b38      	ldr	r3, [pc, #224]	@ (8002914 <HAL_GPIO_Init+0x304>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002856:	4a2f      	ldr	r2, [pc, #188]	@ (8002914 <HAL_GPIO_Init+0x304>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800285c:	4b2d      	ldr	r3, [pc, #180]	@ (8002914 <HAL_GPIO_Init+0x304>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002880:	4a24      	ldr	r2, [pc, #144]	@ (8002914 <HAL_GPIO_Init+0x304>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002886:	4b23      	ldr	r3, [pc, #140]	@ (8002914 <HAL_GPIO_Init+0x304>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002914 <HAL_GPIO_Init+0x304>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b0:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <HAL_GPIO_Init+0x304>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002914 <HAL_GPIO_Init+0x304>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3301      	adds	r3, #1
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b0f      	cmp	r3, #15
 80028e4:	f67f aea2 	bls.w	800262c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3724      	adds	r7, #36	@ 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40013800 	.word	0x40013800
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400
 8002908:	40020800 	.word	0x40020800
 800290c:	40020c00 	.word	0x40020c00
 8002910:	40021000 	.word	0x40021000
 8002914:	40013c00 	.word	0x40013c00

08002918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	887b      	ldrh	r3, [r7, #2]
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e001      	b.n	800293a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
 8002954:	4613      	mov	r3, r2
 8002956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	041a      	lsls	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e12b      	b.n	8002be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe fffe 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2224      	movs	r2, #36	@ 0x24
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e0:	f001 f89a 	bl	8003b18 <HAL_RCC_GetPCLK1Freq>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a81      	ldr	r2, [pc, #516]	@ (8002bf0 <HAL_I2C_Init+0x274>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d807      	bhi.n	8002a00 <HAL_I2C_Init+0x84>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a80      	ldr	r2, [pc, #512]	@ (8002bf4 <HAL_I2C_Init+0x278>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	bf94      	ite	ls
 80029f8:	2301      	movls	r3, #1
 80029fa:	2300      	movhi	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	e006      	b.n	8002a0e <HAL_I2C_Init+0x92>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4a7d      	ldr	r2, [pc, #500]	@ (8002bf8 <HAL_I2C_Init+0x27c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	bf94      	ite	ls
 8002a08:	2301      	movls	r3, #1
 8002a0a:	2300      	movhi	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0e7      	b.n	8002be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a78      	ldr	r2, [pc, #480]	@ (8002bfc <HAL_I2C_Init+0x280>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	0c9b      	lsrs	r3, r3, #18
 8002a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a6a      	ldr	r2, [pc, #424]	@ (8002bf0 <HAL_I2C_Init+0x274>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d802      	bhi.n	8002a50 <HAL_I2C_Init+0xd4>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	e009      	b.n	8002a64 <HAL_I2C_Init+0xe8>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	4a69      	ldr	r2, [pc, #420]	@ (8002c00 <HAL_I2C_Init+0x284>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	3301      	adds	r3, #1
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	495c      	ldr	r1, [pc, #368]	@ (8002bf0 <HAL_I2C_Init+0x274>)
 8002a80:	428b      	cmp	r3, r1
 8002a82:	d819      	bhi.n	8002ab8 <HAL_I2C_Init+0x13c>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1e59      	subs	r1, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a92:	1c59      	adds	r1, r3, #1
 8002a94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a98:	400b      	ands	r3, r1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_I2C_Init+0x138>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e59      	subs	r1, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab2:	e051      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	e04f      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d111      	bne.n	8002ae4 <HAL_I2C_Init+0x168>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e012      	b.n	8002b0a <HAL_I2C_Init+0x18e>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	0099      	lsls	r1, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Init+0x196>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e022      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10e      	bne.n	8002b38 <HAL_I2C_Init+0x1bc>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1e58      	subs	r0, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6859      	ldr	r1, [r3, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	440b      	add	r3, r1
 8002b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b36:	e00f      	b.n	8002b58 <HAL_I2C_Init+0x1dc>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1e58      	subs	r0, r3, #1
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	0099      	lsls	r1, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	6809      	ldr	r1, [r1, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6911      	ldr	r1, [r2, #16]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68d2      	ldr	r2, [r2, #12]
 8002b92:	4311      	orrs	r1, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	000186a0 	.word	0x000186a0
 8002bf4:	001e847f 	.word	0x001e847f
 8002bf8:	003d08ff 	.word	0x003d08ff
 8002bfc:	431bde83 	.word	0x431bde83
 8002c00:	10624dd3 	.word	0x10624dd3

08002c04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	460b      	mov	r3, r1
 8002c12:	817b      	strh	r3, [r7, #10]
 8002c14:	4613      	mov	r3, r2
 8002c16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff f836 	bl	8001c88 <HAL_GetTick>
 8002c1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	f040 80e0 	bne.w	8002dec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2319      	movs	r3, #25
 8002c32:	2201      	movs	r2, #1
 8002c34:	4970      	ldr	r1, [pc, #448]	@ (8002df8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f964 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0d3      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_I2C_Master_Transmit+0x50>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e0cc      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d007      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f042 0201 	orr.w	r2, r2, #1
 8002c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2221      	movs	r2, #33	@ 0x21
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2210      	movs	r2, #16
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	893a      	ldrh	r2, [r7, #8]
 8002caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a50      	ldr	r2, [pc, #320]	@ (8002dfc <HAL_I2C_Master_Transmit+0x1f8>)
 8002cba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cbc:	8979      	ldrh	r1, [r7, #10]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	6a3a      	ldr	r2, [r7, #32]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 f89c 	bl	8002e00 <I2C_MasterRequestWrite>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e08d      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ce8:	e066      	b.n	8002db8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	6a39      	ldr	r1, [r7, #32]
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fa22 	bl	8003138 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00d      	beq.n	8002d16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d107      	bne.n	8002d12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06b      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d11b      	bne.n	8002d8c <HAL_I2C_Master_Transmit+0x188>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d017      	beq.n	8002d8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	6a39      	ldr	r1, [r7, #32]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fa19 	bl	80031c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00d      	beq.n	8002db8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d107      	bne.n	8002db4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e01a      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d194      	bne.n	8002cea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e000      	b.n	8002dee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	00100002 	.word	0x00100002
 8002dfc:	ffff0000 	.word	0xffff0000

08002e00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d006      	beq.n	8002e2a <I2C_MasterRequestWrite+0x2a>
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d003      	beq.n	8002e2a <I2C_MasterRequestWrite+0x2a>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e28:	d108      	bne.n	8002e3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e00b      	b.n	8002e54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e40:	2b12      	cmp	r3, #18
 8002e42:	d107      	bne.n	8002e54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f84f 	bl	8002f04 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00d      	beq.n	8002e88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e7a:	d103      	bne.n	8002e84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e035      	b.n	8002ef4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e90:	d108      	bne.n	8002ea4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e92:	897b      	ldrh	r3, [r7, #10]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ea0:	611a      	str	r2, [r3, #16]
 8002ea2:	e01b      	b.n	8002edc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ea4:	897b      	ldrh	r3, [r7, #10]
 8002ea6:	11db      	asrs	r3, r3, #7
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f003 0306 	and.w	r3, r3, #6
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f063 030f 	orn	r3, r3, #15
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	490e      	ldr	r1, [pc, #56]	@ (8002efc <I2C_MasterRequestWrite+0xfc>)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f898 	bl	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e010      	b.n	8002ef4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4907      	ldr	r1, [pc, #28]	@ (8002f00 <I2C_MasterRequestWrite+0x100>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f888 	bl	8002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	00010008 	.word	0x00010008
 8002f00:	00010002 	.word	0x00010002

08002f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f14:	e048      	b.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d044      	beq.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fe feb3 	bl	8001c88 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d302      	bcc.n	8002f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d139      	bne.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	0c1b      	lsrs	r3, r3, #16
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d10d      	bne.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	43da      	mvns	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	e00c      	b.n	8002f74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d116      	bne.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e023      	b.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	0c1b      	lsrs	r3, r3, #16
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10d      	bne.n	8002fce <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	43da      	mvns	r2, r3
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	e00c      	b.n	8002fe8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d093      	beq.n	8002f16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003006:	e071      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003016:	d123      	bne.n	8003060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003026:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003030:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e067      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d041      	beq.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003068:	f7fe fe0e 	bl	8001c88 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	d302      	bcc.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d136      	bne.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d10c      	bne.n	80030a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	43da      	mvns	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4013      	ands	r3, r2
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	bf14      	ite	ne
 800309a:	2301      	movne	r3, #1
 800309c:	2300      	moveq	r3, #0
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	e00b      	b.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	43da      	mvns	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e021      	b.n	8003130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	0c1b      	lsrs	r3, r3, #16
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10c      	bne.n	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	43da      	mvns	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	4013      	ands	r3, r2
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e00b      	b.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4013      	ands	r3, r2
 800311c:	b29b      	uxth	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf14      	ite	ne
 8003122:	2301      	movne	r3, #1
 8003124:	2300      	moveq	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	f47f af6d 	bne.w	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003144:	e034      	b.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f886 	bl	8003258 <I2C_IsAcknowledgeFailed>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e034      	b.n	80031c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d028      	beq.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7fe fd93 	bl	8001c88 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11d      	bne.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317e:	2b80      	cmp	r3, #128	@ 0x80
 8003180:	d016      	beq.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e007      	b.n	80031c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ba:	2b80      	cmp	r3, #128	@ 0x80
 80031bc:	d1c3      	bne.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031d4:	e034      	b.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f83e 	bl	8003258 <I2C_IsAcknowledgeFailed>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e034      	b.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d028      	beq.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ee:	f7fe fd4b 	bl	8001c88 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d302      	bcc.n	8003204 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11d      	bne.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d016      	beq.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e007      	b.n	8003250 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d1c3      	bne.n	80031d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800326e:	d11b      	bne.n	80032a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003278:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	f043 0204 	orr.w	r2, r3, #4
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e267      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d075      	beq.n	80033c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032d6:	4b88      	ldr	r3, [pc, #544]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d00c      	beq.n	80032fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e2:	4b85      	ldr	r3, [pc, #532]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d112      	bne.n	8003314 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ee:	4b82      	ldr	r3, [pc, #520]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032fa:	d10b      	bne.n	8003314 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fc:	4b7e      	ldr	r3, [pc, #504]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d05b      	beq.n	80033c0 <HAL_RCC_OscConfig+0x108>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d157      	bne.n	80033c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e242      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800331c:	d106      	bne.n	800332c <HAL_RCC_OscConfig+0x74>
 800331e:	4b76      	ldr	r3, [pc, #472]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a75      	ldr	r2, [pc, #468]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e01d      	b.n	8003368 <HAL_RCC_OscConfig+0xb0>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0x98>
 8003336:	4b70      	ldr	r3, [pc, #448]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a6f      	ldr	r2, [pc, #444]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 800333c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b6d      	ldr	r3, [pc, #436]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a6c      	ldr	r2, [pc, #432]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e00b      	b.n	8003368 <HAL_RCC_OscConfig+0xb0>
 8003350:	4b69      	ldr	r3, [pc, #420]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a68      	ldr	r2, [pc, #416]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 8003356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b66      	ldr	r3, [pc, #408]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a65      	ldr	r2, [pc, #404]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 8003362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fe fc8a 	bl	8001c88 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003378:	f7fe fc86 	bl	8001c88 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	@ 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e207      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338a:	4b5b      	ldr	r3, [pc, #364]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0xc0>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fe fc76 	bl	8001c88 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a0:	f7fe fc72 	bl	8001c88 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	@ 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e1f3      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	4b51      	ldr	r3, [pc, #324]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0xe8>
 80033be:	e000      	b.n	80033c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d063      	beq.n	8003496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033ce:	4b4a      	ldr	r3, [pc, #296]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033da:	4b47      	ldr	r3, [pc, #284]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d11c      	bne.n	8003420 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033e6:	4b44      	ldr	r3, [pc, #272]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d116      	bne.n	8003420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f2:	4b41      	ldr	r3, [pc, #260]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_RCC_OscConfig+0x152>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d001      	beq.n	800340a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e1c7      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340a:	4b3b      	ldr	r3, [pc, #236]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4937      	ldr	r1, [pc, #220]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800341e:	e03a      	b.n	8003496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d020      	beq.n	800346a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003428:	4b34      	ldr	r3, [pc, #208]	@ (80034fc <HAL_RCC_OscConfig+0x244>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342e:	f7fe fc2b 	bl	8001c88 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003436:	f7fe fc27 	bl	8001c88 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e1a8      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003448:	4b2b      	ldr	r3, [pc, #172]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003454:	4b28      	ldr	r3, [pc, #160]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4925      	ldr	r1, [pc, #148]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 8003464:	4313      	orrs	r3, r2
 8003466:	600b      	str	r3, [r1, #0]
 8003468:	e015      	b.n	8003496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346a:	4b24      	ldr	r3, [pc, #144]	@ (80034fc <HAL_RCC_OscConfig+0x244>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe fc0a 	bl	8001c88 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003478:	f7fe fc06 	bl	8001c88 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e187      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348a:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d036      	beq.n	8003510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d016      	beq.n	80034d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034aa:	4b15      	ldr	r3, [pc, #84]	@ (8003500 <HAL_RCC_OscConfig+0x248>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fe fbea 	bl	8001c88 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b8:	f7fe fbe6 	bl	8001c88 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e167      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ca:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <HAL_RCC_OscConfig+0x240>)
 80034cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x200>
 80034d6:	e01b      	b.n	8003510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d8:	4b09      	ldr	r3, [pc, #36]	@ (8003500 <HAL_RCC_OscConfig+0x248>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034de:	f7fe fbd3 	bl	8001c88 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e4:	e00e      	b.n	8003504 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e6:	f7fe fbcf 	bl	8001c88 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d907      	bls.n	8003504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e150      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
 80034f8:	40023800 	.word	0x40023800
 80034fc:	42470000 	.word	0x42470000
 8003500:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	4b88      	ldr	r3, [pc, #544]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ea      	bne.n	80034e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8097 	beq.w	800364c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003522:	4b81      	ldr	r3, [pc, #516]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10f      	bne.n	800354e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	4b7d      	ldr	r3, [pc, #500]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	4a7c      	ldr	r2, [pc, #496]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800353c:	6413      	str	r3, [r2, #64]	@ 0x40
 800353e:	4b7a      	ldr	r3, [pc, #488]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354e:	4b77      	ldr	r3, [pc, #476]	@ (800372c <HAL_RCC_OscConfig+0x474>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d118      	bne.n	800358c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355a:	4b74      	ldr	r3, [pc, #464]	@ (800372c <HAL_RCC_OscConfig+0x474>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a73      	ldr	r2, [pc, #460]	@ (800372c <HAL_RCC_OscConfig+0x474>)
 8003560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003566:	f7fe fb8f 	bl	8001c88 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800356e:	f7fe fb8b 	bl	8001c88 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e10c      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003580:	4b6a      	ldr	r3, [pc, #424]	@ (800372c <HAL_RCC_OscConfig+0x474>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f0      	beq.n	800356e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_OscConfig+0x2ea>
 8003594:	4b64      	ldr	r3, [pc, #400]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003598:	4a63      	ldr	r2, [pc, #396]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a0:	e01c      	b.n	80035dc <HAL_RCC_OscConfig+0x324>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x30c>
 80035aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0x324>
 80035c4:	4b58      	ldr	r3, [pc, #352]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c8:	4a57      	ldr	r2, [pc, #348]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 80035ca:	f023 0301 	bic.w	r3, r3, #1
 80035ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80035d0:	4b55      	ldr	r3, [pc, #340]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d4:	4a54      	ldr	r2, [pc, #336]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 80035d6:	f023 0304 	bic.w	r3, r3, #4
 80035da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d015      	beq.n	8003610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fe fb50 	bl	8001c88 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fe fb4c 	bl	8001c88 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0cb      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003602:	4b49      	ldr	r3, [pc, #292]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0ee      	beq.n	80035ec <HAL_RCC_OscConfig+0x334>
 800360e:	e014      	b.n	800363a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003610:	f7fe fb3a 	bl	8001c88 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003618:	f7fe fb36 	bl	8001c88 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003626:	4293      	cmp	r3, r2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0b5      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362e:	4b3e      	ldr	r3, [pc, #248]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1ee      	bne.n	8003618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003640:	4b39      	ldr	r3, [pc, #228]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	4a38      	ldr	r2, [pc, #224]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800364a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80a1 	beq.w	8003798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003656:	4b34      	ldr	r3, [pc, #208]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
 800365e:	2b08      	cmp	r3, #8
 8003660:	d05c      	beq.n	800371c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d141      	bne.n	80036ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366a:	4b31      	ldr	r3, [pc, #196]	@ (8003730 <HAL_RCC_OscConfig+0x478>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe fb0a 	bl	8001c88 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe fb06 	bl	8001c88 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e087      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	4b27      	ldr	r3, [pc, #156]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69da      	ldr	r2, [r3, #28]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ac:	085b      	lsrs	r3, r3, #1
 80036ae:	3b01      	subs	r3, #1
 80036b0:	041b      	lsls	r3, r3, #16
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	061b      	lsls	r3, r3, #24
 80036ba:	491b      	ldr	r1, [pc, #108]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003730 <HAL_RCC_OscConfig+0x478>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c6:	f7fe fadf 	bl	8001c88 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fe fadb 	bl	8001c88 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e05c      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e0:	4b11      	ldr	r3, [pc, #68]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x416>
 80036ec:	e054      	b.n	8003798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ee:	4b10      	ldr	r3, [pc, #64]	@ (8003730 <HAL_RCC_OscConfig+0x478>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fe fac8 	bl	8001c88 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fc:	f7fe fac4 	bl	8001c88 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e045      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370e:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_RCC_OscConfig+0x470>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x444>
 800371a:	e03d      	b.n	8003798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d107      	bne.n	8003734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e038      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
 8003728:	40023800 	.word	0x40023800
 800372c:	40007000 	.word	0x40007000
 8003730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003734:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <HAL_RCC_OscConfig+0x4ec>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d028      	beq.n	8003794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374c:	429a      	cmp	r2, r3
 800374e:	d121      	bne.n	8003794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d11a      	bne.n	8003794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003764:	4013      	ands	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800376a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800376c:	4293      	cmp	r3, r2
 800376e:	d111      	bne.n	8003794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	3b01      	subs	r3, #1
 800377e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d107      	bne.n	8003794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d001      	beq.n	8003798 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800

080037a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0cc      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037bc:	4b68      	ldr	r3, [pc, #416]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d90c      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b65      	ldr	r3, [pc, #404]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b63      	ldr	r3, [pc, #396]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0b8      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037fc:	4b59      	ldr	r3, [pc, #356]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a58      	ldr	r2, [pc, #352]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003806:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003814:	4b53      	ldr	r3, [pc, #332]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a52      	ldr	r2, [pc, #328]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800381e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003820:	4b50      	ldr	r3, [pc, #320]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	494d      	ldr	r1, [pc, #308]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d044      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b47      	ldr	r3, [pc, #284]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d119      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e07f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d003      	beq.n	8003866 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003862:	2b03      	cmp	r3, #3
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003866:	4b3f      	ldr	r3, [pc, #252]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e06f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003876:	4b3b      	ldr	r3, [pc, #236]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e067      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003886:	4b37      	ldr	r3, [pc, #220]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4934      	ldr	r1, [pc, #208]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003898:	f7fe f9f6 	bl	8001c88 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a0:	f7fe f9f2 	bl	8001c88 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e04f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 020c 	and.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1eb      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038c8:	4b25      	ldr	r3, [pc, #148]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d20c      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b22      	ldr	r3, [pc, #136]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b20      	ldr	r3, [pc, #128]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e032      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038fc:	4b19      	ldr	r3, [pc, #100]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4916      	ldr	r1, [pc, #88]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391a:	4b12      	ldr	r3, [pc, #72]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	490e      	ldr	r1, [pc, #56]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800392e:	f000 f821 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003932:	4602      	mov	r2, r0
 8003934:	4b0b      	ldr	r3, [pc, #44]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	490a      	ldr	r1, [pc, #40]	@ (8003968 <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	5ccb      	ldrb	r3, [r1, r3]
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	4a09      	ldr	r2, [pc, #36]	@ (800396c <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800394a:	4b09      	ldr	r3, [pc, #36]	@ (8003970 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe f956 	bl	8001c00 <HAL_InitTick>

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40023c00 	.word	0x40023c00
 8003964:	40023800 	.word	0x40023800
 8003968:	08004ae8 	.word	0x08004ae8
 800396c:	20000010 	.word	0x20000010
 8003970:	20000014 	.word	0x20000014

08003974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003978:	b090      	sub	sp, #64	@ 0x40
 800397a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800398c:	4b59      	ldr	r3, [pc, #356]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x180>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b08      	cmp	r3, #8
 8003996:	d00d      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003998:	2b08      	cmp	r3, #8
 800399a:	f200 80a1 	bhi.w	8003ae0 <HAL_RCC_GetSysClockFreq+0x16c>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x34>
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d003      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0x3a>
 80039a6:	e09b      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a8:	4b53      	ldr	r3, [pc, #332]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x184>)
 80039aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039ac:	e09b      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ae:	4b53      	ldr	r3, [pc, #332]	@ (8003afc <HAL_RCC_GetSysClockFreq+0x188>)
 80039b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039b2:	e098      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039b4:	4b4f      	ldr	r3, [pc, #316]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039be:	4b4d      	ldr	r3, [pc, #308]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d028      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ca:	4b4a      	ldr	r3, [pc, #296]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x180>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	099b      	lsrs	r3, r3, #6
 80039d0:	2200      	movs	r2, #0
 80039d2:	623b      	str	r3, [r7, #32]
 80039d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039dc:	2100      	movs	r1, #0
 80039de:	4b47      	ldr	r3, [pc, #284]	@ (8003afc <HAL_RCC_GetSysClockFreq+0x188>)
 80039e0:	fb03 f201 	mul.w	r2, r3, r1
 80039e4:	2300      	movs	r3, #0
 80039e6:	fb00 f303 	mul.w	r3, r0, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	4a43      	ldr	r2, [pc, #268]	@ (8003afc <HAL_RCC_GetSysClockFreq+0x188>)
 80039ee:	fba0 1202 	umull	r1, r2, r0, r2
 80039f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039f4:	460a      	mov	r2, r1
 80039f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039fa:	4413      	add	r3, r2
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a00:	2200      	movs	r2, #0
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	61fa      	str	r2, [r7, #28]
 8003a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a0e:	f7fd f855 	bl	8000abc <__aeabi_uldivmod>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4613      	mov	r3, r2
 8003a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a1a:	e053      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1c:	4b35      	ldr	r3, [pc, #212]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	099b      	lsrs	r3, r3, #6
 8003a22:	2200      	movs	r2, #0
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	617a      	str	r2, [r7, #20]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a2e:	f04f 0b00 	mov.w	fp, #0
 8003a32:	4652      	mov	r2, sl
 8003a34:	465b      	mov	r3, fp
 8003a36:	f04f 0000 	mov.w	r0, #0
 8003a3a:	f04f 0100 	mov.w	r1, #0
 8003a3e:	0159      	lsls	r1, r3, #5
 8003a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a44:	0150      	lsls	r0, r2, #5
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	ebb2 080a 	subs.w	r8, r2, sl
 8003a4e:	eb63 090b 	sbc.w	r9, r3, fp
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a66:	ebb2 0408 	subs.w	r4, r2, r8
 8003a6a:	eb63 0509 	sbc.w	r5, r3, r9
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	00eb      	lsls	r3, r5, #3
 8003a78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a7c:	00e2      	lsls	r2, r4, #3
 8003a7e:	4614      	mov	r4, r2
 8003a80:	461d      	mov	r5, r3
 8003a82:	eb14 030a 	adds.w	r3, r4, sl
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	eb45 030b 	adc.w	r3, r5, fp
 8003a8c:	607b      	str	r3, [r7, #4]
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	028b      	lsls	r3, r1, #10
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	028a      	lsls	r2, r1, #10
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aae:	2200      	movs	r2, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	60fa      	str	r2, [r7, #12]
 8003ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab8:	f7fd f800 	bl	8000abc <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ad4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ade:	e002      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae0:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3740      	adds	r7, #64	@ 0x40
 8003aec:	46bd      	mov	sp, r7
 8003aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
 8003af8:	00f42400 	.word	0x00f42400
 8003afc:	017d7840 	.word	0x017d7840

08003b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b04:	4b03      	ldr	r3, [pc, #12]	@ (8003b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000010 	.word	0x20000010

08003b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b1c:	f7ff fff0 	bl	8003b00 <HAL_RCC_GetHCLKFreq>
 8003b20:	4602      	mov	r2, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	0a9b      	lsrs	r3, r3, #10
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4903      	ldr	r1, [pc, #12]	@ (8003b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2e:	5ccb      	ldrb	r3, [r1, r3]
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	08004af8 	.word	0x08004af8

08003b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e041      	b.n	8003bd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd ff64 	bl	8001a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f000 f950 	bl	8003e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d001      	beq.n	8003bf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e03c      	b.n	8003c72 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1e      	ldr	r2, [pc, #120]	@ (8003c80 <HAL_TIM_Base_Start+0xa0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d018      	beq.n	8003c3c <HAL_TIM_Base_Start+0x5c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c12:	d013      	beq.n	8003c3c <HAL_TIM_Base_Start+0x5c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1a      	ldr	r2, [pc, #104]	@ (8003c84 <HAL_TIM_Base_Start+0xa4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d00e      	beq.n	8003c3c <HAL_TIM_Base_Start+0x5c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a19      	ldr	r2, [pc, #100]	@ (8003c88 <HAL_TIM_Base_Start+0xa8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d009      	beq.n	8003c3c <HAL_TIM_Base_Start+0x5c>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a17      	ldr	r2, [pc, #92]	@ (8003c8c <HAL_TIM_Base_Start+0xac>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d004      	beq.n	8003c3c <HAL_TIM_Base_Start+0x5c>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a16      	ldr	r2, [pc, #88]	@ (8003c90 <HAL_TIM_Base_Start+0xb0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d111      	bne.n	8003c60 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b06      	cmp	r3, #6
 8003c4c:	d010      	beq.n	8003c70 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5e:	e007      	b.n	8003c70 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40010000 	.word	0x40010000
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40000800 	.word	0x40000800
 8003c8c:	40000c00 	.word	0x40000c00
 8003c90:	40014000 	.word	0x40014000

08003c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e0b4      	b.n	8003e1a <HAL_TIM_ConfigClockSource+0x186>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce8:	d03e      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0xd4>
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cee:	f200 8087 	bhi.w	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf6:	f000 8086 	beq.w	8003e06 <HAL_TIM_ConfigClockSource+0x172>
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cfe:	d87f      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b70      	cmp	r3, #112	@ 0x70
 8003d02:	d01a      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0xa6>
 8003d04:	2b70      	cmp	r3, #112	@ 0x70
 8003d06:	d87b      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b60      	cmp	r3, #96	@ 0x60
 8003d0a:	d050      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x11a>
 8003d0c:	2b60      	cmp	r3, #96	@ 0x60
 8003d0e:	d877      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b50      	cmp	r3, #80	@ 0x50
 8003d12:	d03c      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0xfa>
 8003d14:	2b50      	cmp	r3, #80	@ 0x50
 8003d16:	d873      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b40      	cmp	r3, #64	@ 0x40
 8003d1a:	d058      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x13a>
 8003d1c:	2b40      	cmp	r3, #64	@ 0x40
 8003d1e:	d86f      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d20:	2b30      	cmp	r3, #48	@ 0x30
 8003d22:	d064      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d24:	2b30      	cmp	r3, #48	@ 0x30
 8003d26:	d86b      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d060      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d867      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d05c      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d05a      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	e062      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d4a:	f000 f971 	bl	8004030 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	609a      	str	r2, [r3, #8]
      break;
 8003d66:	e04f      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	f000 f95a 	bl	8004030 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d8a:	609a      	str	r2, [r3, #8]
      break;
 8003d8c:	e03c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f000 f8ce 	bl	8003f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2150      	movs	r1, #80	@ 0x50
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f927 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 8003dac:	e02c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f000 f8ed 	bl	8003f9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2160      	movs	r1, #96	@ 0x60
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f917 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 8003dcc:	e01c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f000 f8ae 	bl	8003f3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2140      	movs	r1, #64	@ 0x40
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f907 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 8003dec:	e00c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f000 f8fe 	bl	8003ffa <TIM_ITRx_SetConfig>
      break;
 8003dfe:	e003      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a3a      	ldr	r2, [pc, #232]	@ (8003f20 <TIM_Base_SetConfig+0xfc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00f      	beq.n	8003e5c <TIM_Base_SetConfig+0x38>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e42:	d00b      	beq.n	8003e5c <TIM_Base_SetConfig+0x38>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a37      	ldr	r2, [pc, #220]	@ (8003f24 <TIM_Base_SetConfig+0x100>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_Base_SetConfig+0x38>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a36      	ldr	r2, [pc, #216]	@ (8003f28 <TIM_Base_SetConfig+0x104>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_Base_SetConfig+0x38>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a35      	ldr	r2, [pc, #212]	@ (8003f2c <TIM_Base_SetConfig+0x108>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2b      	ldr	r2, [pc, #172]	@ (8003f20 <TIM_Base_SetConfig+0xfc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01b      	beq.n	8003eae <TIM_Base_SetConfig+0x8a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7c:	d017      	beq.n	8003eae <TIM_Base_SetConfig+0x8a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a28      	ldr	r2, [pc, #160]	@ (8003f24 <TIM_Base_SetConfig+0x100>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <TIM_Base_SetConfig+0x8a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a27      	ldr	r2, [pc, #156]	@ (8003f28 <TIM_Base_SetConfig+0x104>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00f      	beq.n	8003eae <TIM_Base_SetConfig+0x8a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a26      	ldr	r2, [pc, #152]	@ (8003f2c <TIM_Base_SetConfig+0x108>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00b      	beq.n	8003eae <TIM_Base_SetConfig+0x8a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a25      	ldr	r2, [pc, #148]	@ (8003f30 <TIM_Base_SetConfig+0x10c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d007      	beq.n	8003eae <TIM_Base_SetConfig+0x8a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a24      	ldr	r2, [pc, #144]	@ (8003f34 <TIM_Base_SetConfig+0x110>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d003      	beq.n	8003eae <TIM_Base_SetConfig+0x8a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a23      	ldr	r2, [pc, #140]	@ (8003f38 <TIM_Base_SetConfig+0x114>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d108      	bne.n	8003ec0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8003f20 <TIM_Base_SetConfig+0xfc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d103      	bne.n	8003ef4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d105      	bne.n	8003f12 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f023 0201 	bic.w	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	611a      	str	r2, [r3, #16]
  }
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40014400 	.word	0x40014400
 8003f38:	40014800 	.word	0x40014800

08003f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f023 0201 	bic.w	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f023 030a 	bic.w	r3, r3, #10
 8003f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	621a      	str	r2, [r3, #32]
}
 8003f8e:	bf00      	nop
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b087      	sub	sp, #28
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f023 0210 	bic.w	r2, r3, #16
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	031b      	lsls	r3, r3, #12
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	f043 0307 	orr.w	r3, r3, #7
 800401c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800404a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	021a      	lsls	r2, r3, #8
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	431a      	orrs	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4313      	orrs	r3, r2
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	609a      	str	r2, [r3, #8]
}
 8004064:	bf00      	nop
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004084:	2302      	movs	r3, #2
 8004086:	e050      	b.n	800412a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d018      	beq.n	80040fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d4:	d013      	beq.n	80040fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a18      	ldr	r2, [pc, #96]	@ (800413c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00e      	beq.n	80040fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a16      	ldr	r2, [pc, #88]	@ (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d009      	beq.n	80040fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a15      	ldr	r2, [pc, #84]	@ (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a13      	ldr	r2, [pc, #76]	@ (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d10c      	bne.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	4313      	orrs	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40010000 	.word	0x40010000
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40000c00 	.word	0x40000c00
 8004148:	40014000 	.word	0x40014000

0800414c <siprintf>:
 800414c:	b40e      	push	{r1, r2, r3}
 800414e:	b500      	push	{lr}
 8004150:	b09c      	sub	sp, #112	@ 0x70
 8004152:	ab1d      	add	r3, sp, #116	@ 0x74
 8004154:	9002      	str	r0, [sp, #8]
 8004156:	9006      	str	r0, [sp, #24]
 8004158:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800415c:	4809      	ldr	r0, [pc, #36]	@ (8004184 <siprintf+0x38>)
 800415e:	9107      	str	r1, [sp, #28]
 8004160:	9104      	str	r1, [sp, #16]
 8004162:	4909      	ldr	r1, [pc, #36]	@ (8004188 <siprintf+0x3c>)
 8004164:	f853 2b04 	ldr.w	r2, [r3], #4
 8004168:	9105      	str	r1, [sp, #20]
 800416a:	6800      	ldr	r0, [r0, #0]
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	a902      	add	r1, sp, #8
 8004170:	f000 f994 	bl	800449c <_svfiprintf_r>
 8004174:	9b02      	ldr	r3, [sp, #8]
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	b01c      	add	sp, #112	@ 0x70
 800417c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004180:	b003      	add	sp, #12
 8004182:	4770      	bx	lr
 8004184:	2000001c 	.word	0x2000001c
 8004188:	ffff0208 	.word	0xffff0208

0800418c <memset>:
 800418c:	4402      	add	r2, r0
 800418e:	4603      	mov	r3, r0
 8004190:	4293      	cmp	r3, r2
 8004192:	d100      	bne.n	8004196 <memset+0xa>
 8004194:	4770      	bx	lr
 8004196:	f803 1b01 	strb.w	r1, [r3], #1
 800419a:	e7f9      	b.n	8004190 <memset+0x4>

0800419c <__errno>:
 800419c:	4b01      	ldr	r3, [pc, #4]	@ (80041a4 <__errno+0x8>)
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	2000001c 	.word	0x2000001c

080041a8 <__libc_init_array>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	4d0d      	ldr	r5, [pc, #52]	@ (80041e0 <__libc_init_array+0x38>)
 80041ac:	4c0d      	ldr	r4, [pc, #52]	@ (80041e4 <__libc_init_array+0x3c>)
 80041ae:	1b64      	subs	r4, r4, r5
 80041b0:	10a4      	asrs	r4, r4, #2
 80041b2:	2600      	movs	r6, #0
 80041b4:	42a6      	cmp	r6, r4
 80041b6:	d109      	bne.n	80041cc <__libc_init_array+0x24>
 80041b8:	4d0b      	ldr	r5, [pc, #44]	@ (80041e8 <__libc_init_array+0x40>)
 80041ba:	4c0c      	ldr	r4, [pc, #48]	@ (80041ec <__libc_init_array+0x44>)
 80041bc:	f000 fc66 	bl	8004a8c <_init>
 80041c0:	1b64      	subs	r4, r4, r5
 80041c2:	10a4      	asrs	r4, r4, #2
 80041c4:	2600      	movs	r6, #0
 80041c6:	42a6      	cmp	r6, r4
 80041c8:	d105      	bne.n	80041d6 <__libc_init_array+0x2e>
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d0:	4798      	blx	r3
 80041d2:	3601      	adds	r6, #1
 80041d4:	e7ee      	b.n	80041b4 <__libc_init_array+0xc>
 80041d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041da:	4798      	blx	r3
 80041dc:	3601      	adds	r6, #1
 80041de:	e7f2      	b.n	80041c6 <__libc_init_array+0x1e>
 80041e0:	08004b3c 	.word	0x08004b3c
 80041e4:	08004b3c 	.word	0x08004b3c
 80041e8:	08004b3c 	.word	0x08004b3c
 80041ec:	08004b40 	.word	0x08004b40

080041f0 <__retarget_lock_acquire_recursive>:
 80041f0:	4770      	bx	lr

080041f2 <__retarget_lock_release_recursive>:
 80041f2:	4770      	bx	lr

080041f4 <_free_r>:
 80041f4:	b538      	push	{r3, r4, r5, lr}
 80041f6:	4605      	mov	r5, r0
 80041f8:	2900      	cmp	r1, #0
 80041fa:	d041      	beq.n	8004280 <_free_r+0x8c>
 80041fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004200:	1f0c      	subs	r4, r1, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	bfb8      	it	lt
 8004206:	18e4      	addlt	r4, r4, r3
 8004208:	f000 f8e0 	bl	80043cc <__malloc_lock>
 800420c:	4a1d      	ldr	r2, [pc, #116]	@ (8004284 <_free_r+0x90>)
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	b933      	cbnz	r3, 8004220 <_free_r+0x2c>
 8004212:	6063      	str	r3, [r4, #4]
 8004214:	6014      	str	r4, [r2, #0]
 8004216:	4628      	mov	r0, r5
 8004218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800421c:	f000 b8dc 	b.w	80043d8 <__malloc_unlock>
 8004220:	42a3      	cmp	r3, r4
 8004222:	d908      	bls.n	8004236 <_free_r+0x42>
 8004224:	6820      	ldr	r0, [r4, #0]
 8004226:	1821      	adds	r1, r4, r0
 8004228:	428b      	cmp	r3, r1
 800422a:	bf01      	itttt	eq
 800422c:	6819      	ldreq	r1, [r3, #0]
 800422e:	685b      	ldreq	r3, [r3, #4]
 8004230:	1809      	addeq	r1, r1, r0
 8004232:	6021      	streq	r1, [r4, #0]
 8004234:	e7ed      	b.n	8004212 <_free_r+0x1e>
 8004236:	461a      	mov	r2, r3
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	b10b      	cbz	r3, 8004240 <_free_r+0x4c>
 800423c:	42a3      	cmp	r3, r4
 800423e:	d9fa      	bls.n	8004236 <_free_r+0x42>
 8004240:	6811      	ldr	r1, [r2, #0]
 8004242:	1850      	adds	r0, r2, r1
 8004244:	42a0      	cmp	r0, r4
 8004246:	d10b      	bne.n	8004260 <_free_r+0x6c>
 8004248:	6820      	ldr	r0, [r4, #0]
 800424a:	4401      	add	r1, r0
 800424c:	1850      	adds	r0, r2, r1
 800424e:	4283      	cmp	r3, r0
 8004250:	6011      	str	r1, [r2, #0]
 8004252:	d1e0      	bne.n	8004216 <_free_r+0x22>
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	6053      	str	r3, [r2, #4]
 800425a:	4408      	add	r0, r1
 800425c:	6010      	str	r0, [r2, #0]
 800425e:	e7da      	b.n	8004216 <_free_r+0x22>
 8004260:	d902      	bls.n	8004268 <_free_r+0x74>
 8004262:	230c      	movs	r3, #12
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	e7d6      	b.n	8004216 <_free_r+0x22>
 8004268:	6820      	ldr	r0, [r4, #0]
 800426a:	1821      	adds	r1, r4, r0
 800426c:	428b      	cmp	r3, r1
 800426e:	bf04      	itt	eq
 8004270:	6819      	ldreq	r1, [r3, #0]
 8004272:	685b      	ldreq	r3, [r3, #4]
 8004274:	6063      	str	r3, [r4, #4]
 8004276:	bf04      	itt	eq
 8004278:	1809      	addeq	r1, r1, r0
 800427a:	6021      	streq	r1, [r4, #0]
 800427c:	6054      	str	r4, [r2, #4]
 800427e:	e7ca      	b.n	8004216 <_free_r+0x22>
 8004280:	bd38      	pop	{r3, r4, r5, pc}
 8004282:	bf00      	nop
 8004284:	200002e4 	.word	0x200002e4

08004288 <sbrk_aligned>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4e0f      	ldr	r6, [pc, #60]	@ (80042c8 <sbrk_aligned+0x40>)
 800428c:	460c      	mov	r4, r1
 800428e:	6831      	ldr	r1, [r6, #0]
 8004290:	4605      	mov	r5, r0
 8004292:	b911      	cbnz	r1, 800429a <sbrk_aligned+0x12>
 8004294:	f000 fba6 	bl	80049e4 <_sbrk_r>
 8004298:	6030      	str	r0, [r6, #0]
 800429a:	4621      	mov	r1, r4
 800429c:	4628      	mov	r0, r5
 800429e:	f000 fba1 	bl	80049e4 <_sbrk_r>
 80042a2:	1c43      	adds	r3, r0, #1
 80042a4:	d103      	bne.n	80042ae <sbrk_aligned+0x26>
 80042a6:	f04f 34ff 	mov.w	r4, #4294967295
 80042aa:	4620      	mov	r0, r4
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
 80042ae:	1cc4      	adds	r4, r0, #3
 80042b0:	f024 0403 	bic.w	r4, r4, #3
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	d0f8      	beq.n	80042aa <sbrk_aligned+0x22>
 80042b8:	1a21      	subs	r1, r4, r0
 80042ba:	4628      	mov	r0, r5
 80042bc:	f000 fb92 	bl	80049e4 <_sbrk_r>
 80042c0:	3001      	adds	r0, #1
 80042c2:	d1f2      	bne.n	80042aa <sbrk_aligned+0x22>
 80042c4:	e7ef      	b.n	80042a6 <sbrk_aligned+0x1e>
 80042c6:	bf00      	nop
 80042c8:	200002e0 	.word	0x200002e0

080042cc <_malloc_r>:
 80042cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042d0:	1ccd      	adds	r5, r1, #3
 80042d2:	f025 0503 	bic.w	r5, r5, #3
 80042d6:	3508      	adds	r5, #8
 80042d8:	2d0c      	cmp	r5, #12
 80042da:	bf38      	it	cc
 80042dc:	250c      	movcc	r5, #12
 80042de:	2d00      	cmp	r5, #0
 80042e0:	4606      	mov	r6, r0
 80042e2:	db01      	blt.n	80042e8 <_malloc_r+0x1c>
 80042e4:	42a9      	cmp	r1, r5
 80042e6:	d904      	bls.n	80042f2 <_malloc_r+0x26>
 80042e8:	230c      	movs	r3, #12
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	2000      	movs	r0, #0
 80042ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043c8 <_malloc_r+0xfc>
 80042f6:	f000 f869 	bl	80043cc <__malloc_lock>
 80042fa:	f8d8 3000 	ldr.w	r3, [r8]
 80042fe:	461c      	mov	r4, r3
 8004300:	bb44      	cbnz	r4, 8004354 <_malloc_r+0x88>
 8004302:	4629      	mov	r1, r5
 8004304:	4630      	mov	r0, r6
 8004306:	f7ff ffbf 	bl	8004288 <sbrk_aligned>
 800430a:	1c43      	adds	r3, r0, #1
 800430c:	4604      	mov	r4, r0
 800430e:	d158      	bne.n	80043c2 <_malloc_r+0xf6>
 8004310:	f8d8 4000 	ldr.w	r4, [r8]
 8004314:	4627      	mov	r7, r4
 8004316:	2f00      	cmp	r7, #0
 8004318:	d143      	bne.n	80043a2 <_malloc_r+0xd6>
 800431a:	2c00      	cmp	r4, #0
 800431c:	d04b      	beq.n	80043b6 <_malloc_r+0xea>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	4639      	mov	r1, r7
 8004322:	4630      	mov	r0, r6
 8004324:	eb04 0903 	add.w	r9, r4, r3
 8004328:	f000 fb5c 	bl	80049e4 <_sbrk_r>
 800432c:	4581      	cmp	r9, r0
 800432e:	d142      	bne.n	80043b6 <_malloc_r+0xea>
 8004330:	6821      	ldr	r1, [r4, #0]
 8004332:	1a6d      	subs	r5, r5, r1
 8004334:	4629      	mov	r1, r5
 8004336:	4630      	mov	r0, r6
 8004338:	f7ff ffa6 	bl	8004288 <sbrk_aligned>
 800433c:	3001      	adds	r0, #1
 800433e:	d03a      	beq.n	80043b6 <_malloc_r+0xea>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	442b      	add	r3, r5
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	f8d8 3000 	ldr.w	r3, [r8]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	bb62      	cbnz	r2, 80043a8 <_malloc_r+0xdc>
 800434e:	f8c8 7000 	str.w	r7, [r8]
 8004352:	e00f      	b.n	8004374 <_malloc_r+0xa8>
 8004354:	6822      	ldr	r2, [r4, #0]
 8004356:	1b52      	subs	r2, r2, r5
 8004358:	d420      	bmi.n	800439c <_malloc_r+0xd0>
 800435a:	2a0b      	cmp	r2, #11
 800435c:	d917      	bls.n	800438e <_malloc_r+0xc2>
 800435e:	1961      	adds	r1, r4, r5
 8004360:	42a3      	cmp	r3, r4
 8004362:	6025      	str	r5, [r4, #0]
 8004364:	bf18      	it	ne
 8004366:	6059      	strne	r1, [r3, #4]
 8004368:	6863      	ldr	r3, [r4, #4]
 800436a:	bf08      	it	eq
 800436c:	f8c8 1000 	streq.w	r1, [r8]
 8004370:	5162      	str	r2, [r4, r5]
 8004372:	604b      	str	r3, [r1, #4]
 8004374:	4630      	mov	r0, r6
 8004376:	f000 f82f 	bl	80043d8 <__malloc_unlock>
 800437a:	f104 000b 	add.w	r0, r4, #11
 800437e:	1d23      	adds	r3, r4, #4
 8004380:	f020 0007 	bic.w	r0, r0, #7
 8004384:	1ac2      	subs	r2, r0, r3
 8004386:	bf1c      	itt	ne
 8004388:	1a1b      	subne	r3, r3, r0
 800438a:	50a3      	strne	r3, [r4, r2]
 800438c:	e7af      	b.n	80042ee <_malloc_r+0x22>
 800438e:	6862      	ldr	r2, [r4, #4]
 8004390:	42a3      	cmp	r3, r4
 8004392:	bf0c      	ite	eq
 8004394:	f8c8 2000 	streq.w	r2, [r8]
 8004398:	605a      	strne	r2, [r3, #4]
 800439a:	e7eb      	b.n	8004374 <_malloc_r+0xa8>
 800439c:	4623      	mov	r3, r4
 800439e:	6864      	ldr	r4, [r4, #4]
 80043a0:	e7ae      	b.n	8004300 <_malloc_r+0x34>
 80043a2:	463c      	mov	r4, r7
 80043a4:	687f      	ldr	r7, [r7, #4]
 80043a6:	e7b6      	b.n	8004316 <_malloc_r+0x4a>
 80043a8:	461a      	mov	r2, r3
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	42a3      	cmp	r3, r4
 80043ae:	d1fb      	bne.n	80043a8 <_malloc_r+0xdc>
 80043b0:	2300      	movs	r3, #0
 80043b2:	6053      	str	r3, [r2, #4]
 80043b4:	e7de      	b.n	8004374 <_malloc_r+0xa8>
 80043b6:	230c      	movs	r3, #12
 80043b8:	6033      	str	r3, [r6, #0]
 80043ba:	4630      	mov	r0, r6
 80043bc:	f000 f80c 	bl	80043d8 <__malloc_unlock>
 80043c0:	e794      	b.n	80042ec <_malloc_r+0x20>
 80043c2:	6005      	str	r5, [r0, #0]
 80043c4:	e7d6      	b.n	8004374 <_malloc_r+0xa8>
 80043c6:	bf00      	nop
 80043c8:	200002e4 	.word	0x200002e4

080043cc <__malloc_lock>:
 80043cc:	4801      	ldr	r0, [pc, #4]	@ (80043d4 <__malloc_lock+0x8>)
 80043ce:	f7ff bf0f 	b.w	80041f0 <__retarget_lock_acquire_recursive>
 80043d2:	bf00      	nop
 80043d4:	200002dc 	.word	0x200002dc

080043d8 <__malloc_unlock>:
 80043d8:	4801      	ldr	r0, [pc, #4]	@ (80043e0 <__malloc_unlock+0x8>)
 80043da:	f7ff bf0a 	b.w	80041f2 <__retarget_lock_release_recursive>
 80043de:	bf00      	nop
 80043e0:	200002dc 	.word	0x200002dc

080043e4 <__ssputs_r>:
 80043e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e8:	688e      	ldr	r6, [r1, #8]
 80043ea:	461f      	mov	r7, r3
 80043ec:	42be      	cmp	r6, r7
 80043ee:	680b      	ldr	r3, [r1, #0]
 80043f0:	4682      	mov	sl, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	4690      	mov	r8, r2
 80043f6:	d82d      	bhi.n	8004454 <__ssputs_r+0x70>
 80043f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004400:	d026      	beq.n	8004450 <__ssputs_r+0x6c>
 8004402:	6965      	ldr	r5, [r4, #20]
 8004404:	6909      	ldr	r1, [r1, #16]
 8004406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800440a:	eba3 0901 	sub.w	r9, r3, r1
 800440e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004412:	1c7b      	adds	r3, r7, #1
 8004414:	444b      	add	r3, r9
 8004416:	106d      	asrs	r5, r5, #1
 8004418:	429d      	cmp	r5, r3
 800441a:	bf38      	it	cc
 800441c:	461d      	movcc	r5, r3
 800441e:	0553      	lsls	r3, r2, #21
 8004420:	d527      	bpl.n	8004472 <__ssputs_r+0x8e>
 8004422:	4629      	mov	r1, r5
 8004424:	f7ff ff52 	bl	80042cc <_malloc_r>
 8004428:	4606      	mov	r6, r0
 800442a:	b360      	cbz	r0, 8004486 <__ssputs_r+0xa2>
 800442c:	6921      	ldr	r1, [r4, #16]
 800442e:	464a      	mov	r2, r9
 8004430:	f000 fae8 	bl	8004a04 <memcpy>
 8004434:	89a3      	ldrh	r3, [r4, #12]
 8004436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800443a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800443e:	81a3      	strh	r3, [r4, #12]
 8004440:	6126      	str	r6, [r4, #16]
 8004442:	6165      	str	r5, [r4, #20]
 8004444:	444e      	add	r6, r9
 8004446:	eba5 0509 	sub.w	r5, r5, r9
 800444a:	6026      	str	r6, [r4, #0]
 800444c:	60a5      	str	r5, [r4, #8]
 800444e:	463e      	mov	r6, r7
 8004450:	42be      	cmp	r6, r7
 8004452:	d900      	bls.n	8004456 <__ssputs_r+0x72>
 8004454:	463e      	mov	r6, r7
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	4632      	mov	r2, r6
 800445a:	4641      	mov	r1, r8
 800445c:	f000 faa8 	bl	80049b0 <memmove>
 8004460:	68a3      	ldr	r3, [r4, #8]
 8004462:	1b9b      	subs	r3, r3, r6
 8004464:	60a3      	str	r3, [r4, #8]
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	4433      	add	r3, r6
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	2000      	movs	r0, #0
 800446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004472:	462a      	mov	r2, r5
 8004474:	f000 fad4 	bl	8004a20 <_realloc_r>
 8004478:	4606      	mov	r6, r0
 800447a:	2800      	cmp	r0, #0
 800447c:	d1e0      	bne.n	8004440 <__ssputs_r+0x5c>
 800447e:	6921      	ldr	r1, [r4, #16]
 8004480:	4650      	mov	r0, sl
 8004482:	f7ff feb7 	bl	80041f4 <_free_r>
 8004486:	230c      	movs	r3, #12
 8004488:	f8ca 3000 	str.w	r3, [sl]
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004492:	81a3      	strh	r3, [r4, #12]
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	e7e9      	b.n	800446e <__ssputs_r+0x8a>
	...

0800449c <_svfiprintf_r>:
 800449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a0:	4698      	mov	r8, r3
 80044a2:	898b      	ldrh	r3, [r1, #12]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	b09d      	sub	sp, #116	@ 0x74
 80044a8:	4607      	mov	r7, r0
 80044aa:	460d      	mov	r5, r1
 80044ac:	4614      	mov	r4, r2
 80044ae:	d510      	bpl.n	80044d2 <_svfiprintf_r+0x36>
 80044b0:	690b      	ldr	r3, [r1, #16]
 80044b2:	b973      	cbnz	r3, 80044d2 <_svfiprintf_r+0x36>
 80044b4:	2140      	movs	r1, #64	@ 0x40
 80044b6:	f7ff ff09 	bl	80042cc <_malloc_r>
 80044ba:	6028      	str	r0, [r5, #0]
 80044bc:	6128      	str	r0, [r5, #16]
 80044be:	b930      	cbnz	r0, 80044ce <_svfiprintf_r+0x32>
 80044c0:	230c      	movs	r3, #12
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	b01d      	add	sp, #116	@ 0x74
 80044ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ce:	2340      	movs	r3, #64	@ 0x40
 80044d0:	616b      	str	r3, [r5, #20]
 80044d2:	2300      	movs	r3, #0
 80044d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80044d6:	2320      	movs	r3, #32
 80044d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80044e0:	2330      	movs	r3, #48	@ 0x30
 80044e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004680 <_svfiprintf_r+0x1e4>
 80044e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044ea:	f04f 0901 	mov.w	r9, #1
 80044ee:	4623      	mov	r3, r4
 80044f0:	469a      	mov	sl, r3
 80044f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044f6:	b10a      	cbz	r2, 80044fc <_svfiprintf_r+0x60>
 80044f8:	2a25      	cmp	r2, #37	@ 0x25
 80044fa:	d1f9      	bne.n	80044f0 <_svfiprintf_r+0x54>
 80044fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004500:	d00b      	beq.n	800451a <_svfiprintf_r+0x7e>
 8004502:	465b      	mov	r3, fp
 8004504:	4622      	mov	r2, r4
 8004506:	4629      	mov	r1, r5
 8004508:	4638      	mov	r0, r7
 800450a:	f7ff ff6b 	bl	80043e4 <__ssputs_r>
 800450e:	3001      	adds	r0, #1
 8004510:	f000 80a7 	beq.w	8004662 <_svfiprintf_r+0x1c6>
 8004514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004516:	445a      	add	r2, fp
 8004518:	9209      	str	r2, [sp, #36]	@ 0x24
 800451a:	f89a 3000 	ldrb.w	r3, [sl]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 809f 	beq.w	8004662 <_svfiprintf_r+0x1c6>
 8004524:	2300      	movs	r3, #0
 8004526:	f04f 32ff 	mov.w	r2, #4294967295
 800452a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800452e:	f10a 0a01 	add.w	sl, sl, #1
 8004532:	9304      	str	r3, [sp, #16]
 8004534:	9307      	str	r3, [sp, #28]
 8004536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800453a:	931a      	str	r3, [sp, #104]	@ 0x68
 800453c:	4654      	mov	r4, sl
 800453e:	2205      	movs	r2, #5
 8004540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004544:	484e      	ldr	r0, [pc, #312]	@ (8004680 <_svfiprintf_r+0x1e4>)
 8004546:	f7fb fe4b 	bl	80001e0 <memchr>
 800454a:	9a04      	ldr	r2, [sp, #16]
 800454c:	b9d8      	cbnz	r0, 8004586 <_svfiprintf_r+0xea>
 800454e:	06d0      	lsls	r0, r2, #27
 8004550:	bf44      	itt	mi
 8004552:	2320      	movmi	r3, #32
 8004554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004558:	0711      	lsls	r1, r2, #28
 800455a:	bf44      	itt	mi
 800455c:	232b      	movmi	r3, #43	@ 0x2b
 800455e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004562:	f89a 3000 	ldrb.w	r3, [sl]
 8004566:	2b2a      	cmp	r3, #42	@ 0x2a
 8004568:	d015      	beq.n	8004596 <_svfiprintf_r+0xfa>
 800456a:	9a07      	ldr	r2, [sp, #28]
 800456c:	4654      	mov	r4, sl
 800456e:	2000      	movs	r0, #0
 8004570:	f04f 0c0a 	mov.w	ip, #10
 8004574:	4621      	mov	r1, r4
 8004576:	f811 3b01 	ldrb.w	r3, [r1], #1
 800457a:	3b30      	subs	r3, #48	@ 0x30
 800457c:	2b09      	cmp	r3, #9
 800457e:	d94b      	bls.n	8004618 <_svfiprintf_r+0x17c>
 8004580:	b1b0      	cbz	r0, 80045b0 <_svfiprintf_r+0x114>
 8004582:	9207      	str	r2, [sp, #28]
 8004584:	e014      	b.n	80045b0 <_svfiprintf_r+0x114>
 8004586:	eba0 0308 	sub.w	r3, r0, r8
 800458a:	fa09 f303 	lsl.w	r3, r9, r3
 800458e:	4313      	orrs	r3, r2
 8004590:	9304      	str	r3, [sp, #16]
 8004592:	46a2      	mov	sl, r4
 8004594:	e7d2      	b.n	800453c <_svfiprintf_r+0xa0>
 8004596:	9b03      	ldr	r3, [sp, #12]
 8004598:	1d19      	adds	r1, r3, #4
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	9103      	str	r1, [sp, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bfbb      	ittet	lt
 80045a2:	425b      	neglt	r3, r3
 80045a4:	f042 0202 	orrlt.w	r2, r2, #2
 80045a8:	9307      	strge	r3, [sp, #28]
 80045aa:	9307      	strlt	r3, [sp, #28]
 80045ac:	bfb8      	it	lt
 80045ae:	9204      	strlt	r2, [sp, #16]
 80045b0:	7823      	ldrb	r3, [r4, #0]
 80045b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80045b4:	d10a      	bne.n	80045cc <_svfiprintf_r+0x130>
 80045b6:	7863      	ldrb	r3, [r4, #1]
 80045b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ba:	d132      	bne.n	8004622 <_svfiprintf_r+0x186>
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	1d1a      	adds	r2, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	9203      	str	r2, [sp, #12]
 80045c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045c8:	3402      	adds	r4, #2
 80045ca:	9305      	str	r3, [sp, #20]
 80045cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004690 <_svfiprintf_r+0x1f4>
 80045d0:	7821      	ldrb	r1, [r4, #0]
 80045d2:	2203      	movs	r2, #3
 80045d4:	4650      	mov	r0, sl
 80045d6:	f7fb fe03 	bl	80001e0 <memchr>
 80045da:	b138      	cbz	r0, 80045ec <_svfiprintf_r+0x150>
 80045dc:	9b04      	ldr	r3, [sp, #16]
 80045de:	eba0 000a 	sub.w	r0, r0, sl
 80045e2:	2240      	movs	r2, #64	@ 0x40
 80045e4:	4082      	lsls	r2, r0
 80045e6:	4313      	orrs	r3, r2
 80045e8:	3401      	adds	r4, #1
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f0:	4824      	ldr	r0, [pc, #144]	@ (8004684 <_svfiprintf_r+0x1e8>)
 80045f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045f6:	2206      	movs	r2, #6
 80045f8:	f7fb fdf2 	bl	80001e0 <memchr>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d036      	beq.n	800466e <_svfiprintf_r+0x1d2>
 8004600:	4b21      	ldr	r3, [pc, #132]	@ (8004688 <_svfiprintf_r+0x1ec>)
 8004602:	bb1b      	cbnz	r3, 800464c <_svfiprintf_r+0x1b0>
 8004604:	9b03      	ldr	r3, [sp, #12]
 8004606:	3307      	adds	r3, #7
 8004608:	f023 0307 	bic.w	r3, r3, #7
 800460c:	3308      	adds	r3, #8
 800460e:	9303      	str	r3, [sp, #12]
 8004610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004612:	4433      	add	r3, r6
 8004614:	9309      	str	r3, [sp, #36]	@ 0x24
 8004616:	e76a      	b.n	80044ee <_svfiprintf_r+0x52>
 8004618:	fb0c 3202 	mla	r2, ip, r2, r3
 800461c:	460c      	mov	r4, r1
 800461e:	2001      	movs	r0, #1
 8004620:	e7a8      	b.n	8004574 <_svfiprintf_r+0xd8>
 8004622:	2300      	movs	r3, #0
 8004624:	3401      	adds	r4, #1
 8004626:	9305      	str	r3, [sp, #20]
 8004628:	4619      	mov	r1, r3
 800462a:	f04f 0c0a 	mov.w	ip, #10
 800462e:	4620      	mov	r0, r4
 8004630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004634:	3a30      	subs	r2, #48	@ 0x30
 8004636:	2a09      	cmp	r2, #9
 8004638:	d903      	bls.n	8004642 <_svfiprintf_r+0x1a6>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0c6      	beq.n	80045cc <_svfiprintf_r+0x130>
 800463e:	9105      	str	r1, [sp, #20]
 8004640:	e7c4      	b.n	80045cc <_svfiprintf_r+0x130>
 8004642:	fb0c 2101 	mla	r1, ip, r1, r2
 8004646:	4604      	mov	r4, r0
 8004648:	2301      	movs	r3, #1
 800464a:	e7f0      	b.n	800462e <_svfiprintf_r+0x192>
 800464c:	ab03      	add	r3, sp, #12
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	462a      	mov	r2, r5
 8004652:	4b0e      	ldr	r3, [pc, #56]	@ (800468c <_svfiprintf_r+0x1f0>)
 8004654:	a904      	add	r1, sp, #16
 8004656:	4638      	mov	r0, r7
 8004658:	f3af 8000 	nop.w
 800465c:	1c42      	adds	r2, r0, #1
 800465e:	4606      	mov	r6, r0
 8004660:	d1d6      	bne.n	8004610 <_svfiprintf_r+0x174>
 8004662:	89ab      	ldrh	r3, [r5, #12]
 8004664:	065b      	lsls	r3, r3, #25
 8004666:	f53f af2d 	bmi.w	80044c4 <_svfiprintf_r+0x28>
 800466a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800466c:	e72c      	b.n	80044c8 <_svfiprintf_r+0x2c>
 800466e:	ab03      	add	r3, sp, #12
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	462a      	mov	r2, r5
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <_svfiprintf_r+0x1f0>)
 8004676:	a904      	add	r1, sp, #16
 8004678:	4638      	mov	r0, r7
 800467a:	f000 f879 	bl	8004770 <_printf_i>
 800467e:	e7ed      	b.n	800465c <_svfiprintf_r+0x1c0>
 8004680:	08004b00 	.word	0x08004b00
 8004684:	08004b0a 	.word	0x08004b0a
 8004688:	00000000 	.word	0x00000000
 800468c:	080043e5 	.word	0x080043e5
 8004690:	08004b06 	.word	0x08004b06

08004694 <_printf_common>:
 8004694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	4616      	mov	r6, r2
 800469a:	4698      	mov	r8, r3
 800469c:	688a      	ldr	r2, [r1, #8]
 800469e:	690b      	ldr	r3, [r1, #16]
 80046a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046a4:	4293      	cmp	r3, r2
 80046a6:	bfb8      	it	lt
 80046a8:	4613      	movlt	r3, r2
 80046aa:	6033      	str	r3, [r6, #0]
 80046ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046b0:	4607      	mov	r7, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	b10a      	cbz	r2, 80046ba <_printf_common+0x26>
 80046b6:	3301      	adds	r3, #1
 80046b8:	6033      	str	r3, [r6, #0]
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	0699      	lsls	r1, r3, #26
 80046be:	bf42      	ittt	mi
 80046c0:	6833      	ldrmi	r3, [r6, #0]
 80046c2:	3302      	addmi	r3, #2
 80046c4:	6033      	strmi	r3, [r6, #0]
 80046c6:	6825      	ldr	r5, [r4, #0]
 80046c8:	f015 0506 	ands.w	r5, r5, #6
 80046cc:	d106      	bne.n	80046dc <_printf_common+0x48>
 80046ce:	f104 0a19 	add.w	sl, r4, #25
 80046d2:	68e3      	ldr	r3, [r4, #12]
 80046d4:	6832      	ldr	r2, [r6, #0]
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	42ab      	cmp	r3, r5
 80046da:	dc26      	bgt.n	800472a <_printf_common+0x96>
 80046dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	3b00      	subs	r3, #0
 80046e4:	bf18      	it	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	0692      	lsls	r2, r2, #26
 80046ea:	d42b      	bmi.n	8004744 <_printf_common+0xb0>
 80046ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046f0:	4641      	mov	r1, r8
 80046f2:	4638      	mov	r0, r7
 80046f4:	47c8      	blx	r9
 80046f6:	3001      	adds	r0, #1
 80046f8:	d01e      	beq.n	8004738 <_printf_common+0xa4>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	6922      	ldr	r2, [r4, #16]
 80046fe:	f003 0306 	and.w	r3, r3, #6
 8004702:	2b04      	cmp	r3, #4
 8004704:	bf02      	ittt	eq
 8004706:	68e5      	ldreq	r5, [r4, #12]
 8004708:	6833      	ldreq	r3, [r6, #0]
 800470a:	1aed      	subeq	r5, r5, r3
 800470c:	68a3      	ldr	r3, [r4, #8]
 800470e:	bf0c      	ite	eq
 8004710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004714:	2500      	movne	r5, #0
 8004716:	4293      	cmp	r3, r2
 8004718:	bfc4      	itt	gt
 800471a:	1a9b      	subgt	r3, r3, r2
 800471c:	18ed      	addgt	r5, r5, r3
 800471e:	2600      	movs	r6, #0
 8004720:	341a      	adds	r4, #26
 8004722:	42b5      	cmp	r5, r6
 8004724:	d11a      	bne.n	800475c <_printf_common+0xc8>
 8004726:	2000      	movs	r0, #0
 8004728:	e008      	b.n	800473c <_printf_common+0xa8>
 800472a:	2301      	movs	r3, #1
 800472c:	4652      	mov	r2, sl
 800472e:	4641      	mov	r1, r8
 8004730:	4638      	mov	r0, r7
 8004732:	47c8      	blx	r9
 8004734:	3001      	adds	r0, #1
 8004736:	d103      	bne.n	8004740 <_printf_common+0xac>
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004740:	3501      	adds	r5, #1
 8004742:	e7c6      	b.n	80046d2 <_printf_common+0x3e>
 8004744:	18e1      	adds	r1, r4, r3
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	2030      	movs	r0, #48	@ 0x30
 800474a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800474e:	4422      	add	r2, r4
 8004750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004758:	3302      	adds	r3, #2
 800475a:	e7c7      	b.n	80046ec <_printf_common+0x58>
 800475c:	2301      	movs	r3, #1
 800475e:	4622      	mov	r2, r4
 8004760:	4641      	mov	r1, r8
 8004762:	4638      	mov	r0, r7
 8004764:	47c8      	blx	r9
 8004766:	3001      	adds	r0, #1
 8004768:	d0e6      	beq.n	8004738 <_printf_common+0xa4>
 800476a:	3601      	adds	r6, #1
 800476c:	e7d9      	b.n	8004722 <_printf_common+0x8e>
	...

08004770 <_printf_i>:
 8004770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	7e0f      	ldrb	r7, [r1, #24]
 8004776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004778:	2f78      	cmp	r7, #120	@ 0x78
 800477a:	4691      	mov	r9, r2
 800477c:	4680      	mov	r8, r0
 800477e:	460c      	mov	r4, r1
 8004780:	469a      	mov	sl, r3
 8004782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004786:	d807      	bhi.n	8004798 <_printf_i+0x28>
 8004788:	2f62      	cmp	r7, #98	@ 0x62
 800478a:	d80a      	bhi.n	80047a2 <_printf_i+0x32>
 800478c:	2f00      	cmp	r7, #0
 800478e:	f000 80d2 	beq.w	8004936 <_printf_i+0x1c6>
 8004792:	2f58      	cmp	r7, #88	@ 0x58
 8004794:	f000 80b9 	beq.w	800490a <_printf_i+0x19a>
 8004798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800479c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047a0:	e03a      	b.n	8004818 <_printf_i+0xa8>
 80047a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047a6:	2b15      	cmp	r3, #21
 80047a8:	d8f6      	bhi.n	8004798 <_printf_i+0x28>
 80047aa:	a101      	add	r1, pc, #4	@ (adr r1, 80047b0 <_printf_i+0x40>)
 80047ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047b0:	08004809 	.word	0x08004809
 80047b4:	0800481d 	.word	0x0800481d
 80047b8:	08004799 	.word	0x08004799
 80047bc:	08004799 	.word	0x08004799
 80047c0:	08004799 	.word	0x08004799
 80047c4:	08004799 	.word	0x08004799
 80047c8:	0800481d 	.word	0x0800481d
 80047cc:	08004799 	.word	0x08004799
 80047d0:	08004799 	.word	0x08004799
 80047d4:	08004799 	.word	0x08004799
 80047d8:	08004799 	.word	0x08004799
 80047dc:	0800491d 	.word	0x0800491d
 80047e0:	08004847 	.word	0x08004847
 80047e4:	080048d7 	.word	0x080048d7
 80047e8:	08004799 	.word	0x08004799
 80047ec:	08004799 	.word	0x08004799
 80047f0:	0800493f 	.word	0x0800493f
 80047f4:	08004799 	.word	0x08004799
 80047f8:	08004847 	.word	0x08004847
 80047fc:	08004799 	.word	0x08004799
 8004800:	08004799 	.word	0x08004799
 8004804:	080048df 	.word	0x080048df
 8004808:	6833      	ldr	r3, [r6, #0]
 800480a:	1d1a      	adds	r2, r3, #4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6032      	str	r2, [r6, #0]
 8004810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004818:	2301      	movs	r3, #1
 800481a:	e09d      	b.n	8004958 <_printf_i+0x1e8>
 800481c:	6833      	ldr	r3, [r6, #0]
 800481e:	6820      	ldr	r0, [r4, #0]
 8004820:	1d19      	adds	r1, r3, #4
 8004822:	6031      	str	r1, [r6, #0]
 8004824:	0606      	lsls	r6, r0, #24
 8004826:	d501      	bpl.n	800482c <_printf_i+0xbc>
 8004828:	681d      	ldr	r5, [r3, #0]
 800482a:	e003      	b.n	8004834 <_printf_i+0xc4>
 800482c:	0645      	lsls	r5, r0, #25
 800482e:	d5fb      	bpl.n	8004828 <_printf_i+0xb8>
 8004830:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004834:	2d00      	cmp	r5, #0
 8004836:	da03      	bge.n	8004840 <_printf_i+0xd0>
 8004838:	232d      	movs	r3, #45	@ 0x2d
 800483a:	426d      	negs	r5, r5
 800483c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004840:	4859      	ldr	r0, [pc, #356]	@ (80049a8 <_printf_i+0x238>)
 8004842:	230a      	movs	r3, #10
 8004844:	e011      	b.n	800486a <_printf_i+0xfa>
 8004846:	6821      	ldr	r1, [r4, #0]
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	0608      	lsls	r0, r1, #24
 800484c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004850:	d402      	bmi.n	8004858 <_printf_i+0xe8>
 8004852:	0649      	lsls	r1, r1, #25
 8004854:	bf48      	it	mi
 8004856:	b2ad      	uxthmi	r5, r5
 8004858:	2f6f      	cmp	r7, #111	@ 0x6f
 800485a:	4853      	ldr	r0, [pc, #332]	@ (80049a8 <_printf_i+0x238>)
 800485c:	6033      	str	r3, [r6, #0]
 800485e:	bf14      	ite	ne
 8004860:	230a      	movne	r3, #10
 8004862:	2308      	moveq	r3, #8
 8004864:	2100      	movs	r1, #0
 8004866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800486a:	6866      	ldr	r6, [r4, #4]
 800486c:	60a6      	str	r6, [r4, #8]
 800486e:	2e00      	cmp	r6, #0
 8004870:	bfa2      	ittt	ge
 8004872:	6821      	ldrge	r1, [r4, #0]
 8004874:	f021 0104 	bicge.w	r1, r1, #4
 8004878:	6021      	strge	r1, [r4, #0]
 800487a:	b90d      	cbnz	r5, 8004880 <_printf_i+0x110>
 800487c:	2e00      	cmp	r6, #0
 800487e:	d04b      	beq.n	8004918 <_printf_i+0x1a8>
 8004880:	4616      	mov	r6, r2
 8004882:	fbb5 f1f3 	udiv	r1, r5, r3
 8004886:	fb03 5711 	mls	r7, r3, r1, r5
 800488a:	5dc7      	ldrb	r7, [r0, r7]
 800488c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004890:	462f      	mov	r7, r5
 8004892:	42bb      	cmp	r3, r7
 8004894:	460d      	mov	r5, r1
 8004896:	d9f4      	bls.n	8004882 <_printf_i+0x112>
 8004898:	2b08      	cmp	r3, #8
 800489a:	d10b      	bne.n	80048b4 <_printf_i+0x144>
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	07df      	lsls	r7, r3, #31
 80048a0:	d508      	bpl.n	80048b4 <_printf_i+0x144>
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	6861      	ldr	r1, [r4, #4]
 80048a6:	4299      	cmp	r1, r3
 80048a8:	bfde      	ittt	le
 80048aa:	2330      	movle	r3, #48	@ 0x30
 80048ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048b4:	1b92      	subs	r2, r2, r6
 80048b6:	6122      	str	r2, [r4, #16]
 80048b8:	f8cd a000 	str.w	sl, [sp]
 80048bc:	464b      	mov	r3, r9
 80048be:	aa03      	add	r2, sp, #12
 80048c0:	4621      	mov	r1, r4
 80048c2:	4640      	mov	r0, r8
 80048c4:	f7ff fee6 	bl	8004694 <_printf_common>
 80048c8:	3001      	adds	r0, #1
 80048ca:	d14a      	bne.n	8004962 <_printf_i+0x1f2>
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295
 80048d0:	b004      	add	sp, #16
 80048d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	f043 0320 	orr.w	r3, r3, #32
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	4833      	ldr	r0, [pc, #204]	@ (80049ac <_printf_i+0x23c>)
 80048e0:	2778      	movs	r7, #120	@ 0x78
 80048e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	6831      	ldr	r1, [r6, #0]
 80048ea:	061f      	lsls	r7, r3, #24
 80048ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80048f0:	d402      	bmi.n	80048f8 <_printf_i+0x188>
 80048f2:	065f      	lsls	r7, r3, #25
 80048f4:	bf48      	it	mi
 80048f6:	b2ad      	uxthmi	r5, r5
 80048f8:	6031      	str	r1, [r6, #0]
 80048fa:	07d9      	lsls	r1, r3, #31
 80048fc:	bf44      	itt	mi
 80048fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004902:	6023      	strmi	r3, [r4, #0]
 8004904:	b11d      	cbz	r5, 800490e <_printf_i+0x19e>
 8004906:	2310      	movs	r3, #16
 8004908:	e7ac      	b.n	8004864 <_printf_i+0xf4>
 800490a:	4827      	ldr	r0, [pc, #156]	@ (80049a8 <_printf_i+0x238>)
 800490c:	e7e9      	b.n	80048e2 <_printf_i+0x172>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	f023 0320 	bic.w	r3, r3, #32
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	e7f6      	b.n	8004906 <_printf_i+0x196>
 8004918:	4616      	mov	r6, r2
 800491a:	e7bd      	b.n	8004898 <_printf_i+0x128>
 800491c:	6833      	ldr	r3, [r6, #0]
 800491e:	6825      	ldr	r5, [r4, #0]
 8004920:	6961      	ldr	r1, [r4, #20]
 8004922:	1d18      	adds	r0, r3, #4
 8004924:	6030      	str	r0, [r6, #0]
 8004926:	062e      	lsls	r6, r5, #24
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	d501      	bpl.n	8004930 <_printf_i+0x1c0>
 800492c:	6019      	str	r1, [r3, #0]
 800492e:	e002      	b.n	8004936 <_printf_i+0x1c6>
 8004930:	0668      	lsls	r0, r5, #25
 8004932:	d5fb      	bpl.n	800492c <_printf_i+0x1bc>
 8004934:	8019      	strh	r1, [r3, #0]
 8004936:	2300      	movs	r3, #0
 8004938:	6123      	str	r3, [r4, #16]
 800493a:	4616      	mov	r6, r2
 800493c:	e7bc      	b.n	80048b8 <_printf_i+0x148>
 800493e:	6833      	ldr	r3, [r6, #0]
 8004940:	1d1a      	adds	r2, r3, #4
 8004942:	6032      	str	r2, [r6, #0]
 8004944:	681e      	ldr	r6, [r3, #0]
 8004946:	6862      	ldr	r2, [r4, #4]
 8004948:	2100      	movs	r1, #0
 800494a:	4630      	mov	r0, r6
 800494c:	f7fb fc48 	bl	80001e0 <memchr>
 8004950:	b108      	cbz	r0, 8004956 <_printf_i+0x1e6>
 8004952:	1b80      	subs	r0, r0, r6
 8004954:	6060      	str	r0, [r4, #4]
 8004956:	6863      	ldr	r3, [r4, #4]
 8004958:	6123      	str	r3, [r4, #16]
 800495a:	2300      	movs	r3, #0
 800495c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004960:	e7aa      	b.n	80048b8 <_printf_i+0x148>
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	4632      	mov	r2, r6
 8004966:	4649      	mov	r1, r9
 8004968:	4640      	mov	r0, r8
 800496a:	47d0      	blx	sl
 800496c:	3001      	adds	r0, #1
 800496e:	d0ad      	beq.n	80048cc <_printf_i+0x15c>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	079b      	lsls	r3, r3, #30
 8004974:	d413      	bmi.n	800499e <_printf_i+0x22e>
 8004976:	68e0      	ldr	r0, [r4, #12]
 8004978:	9b03      	ldr	r3, [sp, #12]
 800497a:	4298      	cmp	r0, r3
 800497c:	bfb8      	it	lt
 800497e:	4618      	movlt	r0, r3
 8004980:	e7a6      	b.n	80048d0 <_printf_i+0x160>
 8004982:	2301      	movs	r3, #1
 8004984:	4632      	mov	r2, r6
 8004986:	4649      	mov	r1, r9
 8004988:	4640      	mov	r0, r8
 800498a:	47d0      	blx	sl
 800498c:	3001      	adds	r0, #1
 800498e:	d09d      	beq.n	80048cc <_printf_i+0x15c>
 8004990:	3501      	adds	r5, #1
 8004992:	68e3      	ldr	r3, [r4, #12]
 8004994:	9903      	ldr	r1, [sp, #12]
 8004996:	1a5b      	subs	r3, r3, r1
 8004998:	42ab      	cmp	r3, r5
 800499a:	dcf2      	bgt.n	8004982 <_printf_i+0x212>
 800499c:	e7eb      	b.n	8004976 <_printf_i+0x206>
 800499e:	2500      	movs	r5, #0
 80049a0:	f104 0619 	add.w	r6, r4, #25
 80049a4:	e7f5      	b.n	8004992 <_printf_i+0x222>
 80049a6:	bf00      	nop
 80049a8:	08004b11 	.word	0x08004b11
 80049ac:	08004b22 	.word	0x08004b22

080049b0 <memmove>:
 80049b0:	4288      	cmp	r0, r1
 80049b2:	b510      	push	{r4, lr}
 80049b4:	eb01 0402 	add.w	r4, r1, r2
 80049b8:	d902      	bls.n	80049c0 <memmove+0x10>
 80049ba:	4284      	cmp	r4, r0
 80049bc:	4623      	mov	r3, r4
 80049be:	d807      	bhi.n	80049d0 <memmove+0x20>
 80049c0:	1e43      	subs	r3, r0, #1
 80049c2:	42a1      	cmp	r1, r4
 80049c4:	d008      	beq.n	80049d8 <memmove+0x28>
 80049c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049ce:	e7f8      	b.n	80049c2 <memmove+0x12>
 80049d0:	4402      	add	r2, r0
 80049d2:	4601      	mov	r1, r0
 80049d4:	428a      	cmp	r2, r1
 80049d6:	d100      	bne.n	80049da <memmove+0x2a>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049e2:	e7f7      	b.n	80049d4 <memmove+0x24>

080049e4 <_sbrk_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4d06      	ldr	r5, [pc, #24]	@ (8004a00 <_sbrk_r+0x1c>)
 80049e8:	2300      	movs	r3, #0
 80049ea:	4604      	mov	r4, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	602b      	str	r3, [r5, #0]
 80049f0:	f7fd f872 	bl	8001ad8 <_sbrk>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_sbrk_r+0x1a>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_sbrk_r+0x1a>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	200002d8 	.word	0x200002d8

08004a04 <memcpy>:
 8004a04:	440a      	add	r2, r1
 8004a06:	4291      	cmp	r1, r2
 8004a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a0c:	d100      	bne.n	8004a10 <memcpy+0xc>
 8004a0e:	4770      	bx	lr
 8004a10:	b510      	push	{r4, lr}
 8004a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a1a:	4291      	cmp	r1, r2
 8004a1c:	d1f9      	bne.n	8004a12 <memcpy+0xe>
 8004a1e:	bd10      	pop	{r4, pc}

08004a20 <_realloc_r>:
 8004a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a24:	4680      	mov	r8, r0
 8004a26:	4615      	mov	r5, r2
 8004a28:	460c      	mov	r4, r1
 8004a2a:	b921      	cbnz	r1, 8004a36 <_realloc_r+0x16>
 8004a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a30:	4611      	mov	r1, r2
 8004a32:	f7ff bc4b 	b.w	80042cc <_malloc_r>
 8004a36:	b92a      	cbnz	r2, 8004a44 <_realloc_r+0x24>
 8004a38:	f7ff fbdc 	bl	80041f4 <_free_r>
 8004a3c:	2400      	movs	r4, #0
 8004a3e:	4620      	mov	r0, r4
 8004a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a44:	f000 f81a 	bl	8004a7c <_malloc_usable_size_r>
 8004a48:	4285      	cmp	r5, r0
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	d802      	bhi.n	8004a54 <_realloc_r+0x34>
 8004a4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a52:	d8f4      	bhi.n	8004a3e <_realloc_r+0x1e>
 8004a54:	4629      	mov	r1, r5
 8004a56:	4640      	mov	r0, r8
 8004a58:	f7ff fc38 	bl	80042cc <_malloc_r>
 8004a5c:	4607      	mov	r7, r0
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d0ec      	beq.n	8004a3c <_realloc_r+0x1c>
 8004a62:	42b5      	cmp	r5, r6
 8004a64:	462a      	mov	r2, r5
 8004a66:	4621      	mov	r1, r4
 8004a68:	bf28      	it	cs
 8004a6a:	4632      	movcs	r2, r6
 8004a6c:	f7ff ffca 	bl	8004a04 <memcpy>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4640      	mov	r0, r8
 8004a74:	f7ff fbbe 	bl	80041f4 <_free_r>
 8004a78:	463c      	mov	r4, r7
 8004a7a:	e7e0      	b.n	8004a3e <_realloc_r+0x1e>

08004a7c <_malloc_usable_size_r>:
 8004a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a80:	1f18      	subs	r0, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bfbc      	itt	lt
 8004a86:	580b      	ldrlt	r3, [r1, r0]
 8004a88:	18c0      	addlt	r0, r0, r3
 8004a8a:	4770      	bx	lr

08004a8c <_init>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr

08004a98 <_fini>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr
